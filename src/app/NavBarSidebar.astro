---
import ColorModeSwitcher from '../components/ColorModeSwitcher.astro';
---

<!-- Navbar mejorado con estética moderna y mejor responsividad -->
<nav
  class="fixed z-30 w-full bg-gradient-to-r from-slate-50 to-slate-100 border-b border-gray-200 shadow-md dark:bg-gradient-to-r dark:from-gray-800 dark:to-gray-900 dark:border-gray-700 transition-all duration-300"
>
  <div class="px-3 py-3 lg:px-5 lg:pl-3">
    <div class="flex items-center justify-between">
      <div class="flex items-center justify-start">
        <!-- Botón de menú móvil mejorado con animación y contraste -->
        <button
          id="toggleSidebarMobile"
          aria-expanded="true"
          aria-controls="sidebar"
          class="p-2 text-indigo-600 rounded-lg cursor-pointer lg:hidden hover:bg-indigo-50 hover:text-indigo-700 focus:bg-indigo-100 focus:ring-2 focus:ring-indigo-300 dark:focus:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-700 dark:hover:text-white transition-all duration-200"
        >
          <svg
            id="toggleSidebarMobileHamburger"
            class="w-6 h-6"
            fill="none"
            stroke="currentColor" 
            stroke-width="1.5"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M3.75 6.75h16.5M3.75 12h10.5m-10.5 5.25h16.5"
            ></path>
          </svg>
          <svg
            id="toggleSidebarMobileClose"
            class="hidden w-6 h-6"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M6 18L18 6M6 6l12 12"
            ></path>
          </svg>
        </button>
        
        <!-- Logo y título con mejor alineación y animación -->
        <a href="/" class="flex items-center ml-2 md:ml-0">
          <img
            src="/images/logo.png"
            class="h-9 mr-3 rounded-full shadow-sm transition-transform hover:scale-105"
            alt="Consultorio Odontológico"
          />
          <span class="hidden md:block self-center text-xl font-semibold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400 whitespace-nowrap transition-colors duration-300">
            Consultorio Odontológico
          </span>
        </a>
      </div>

      <div class="flex items-center gap-2">
        <!-- Color mode switcher con mejor integración -->
        <div class="mr-1">
          <ColorModeSwitcher />
        </div>

        <!-- Separador sutil -->
        <div class="hidden sm:block h-6 w-px bg-gray-300 dark:bg-gray-700 mx-1"></div>

        <!-- Perfil mejorado con mejor estética e indicadores -->
        <div class="flex items-center ml-1">
          <div>
            <button
              type="button"
              class="flex text-sm bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full p-0.5 focus:ring-4 focus:ring-blue-300 dark:focus:ring-indigo-600 transition-all duration-200 hover:shadow-md"
              id="user-menu-button"
              aria-expanded="false"
              data-dropdown-toggle="dropdown-2"
            >
              <span class="sr-only">Menú Desplegable</span>
              <div class="relative">
                <div id="profileImageSkeleton" class="w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-700 animate-pulse"></div>
                <img
                  id="userProfileImage"
                  class="w-8 h-8 rounded-full hidden"
                  src="/images/perfil-logo.png"
                  alt="Foto de perfil"
                />
                <div id="notificationDot" class="hidden absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white dark:border-gray-800"></div>
              </div>
            </button>
          </div>
          
          <!-- Dropdown mejorado con mejor espaciado y estructura -->
          <div
            class="z-50 hidden mt-2 text-base list-none bg-white divide-y divide-gray-100 rounded-xl shadow-xl dark:bg-gray-700 dark:divide-gray-600 transition-all duration-200"
            id="dropdown-2"
          >
            <div class="px-4 py-3" role="none">
              <div id="userDataSkeleton" class="animate-pulse flex flex-col space-y-2">
                <div class="h-4 bg-gray-200 rounded dark:bg-gray-700 w-3/4"></div>
                <div class="h-3 bg-gray-200 rounded dark:bg-gray-700 w-full"></div>
              </div>
              <p class="hidden text-sm font-medium text-gray-900 dark:text-white" role="none" id="user-name">
                Cargando...
              </p>
              <p
                class="hidden text-sm text-gray-600 truncate dark:text-gray-300"
                role="none"
                id="user-email"
              >
                Cargando...
              </p>
            </div>
            <ul class="py-1" role="none">
              <li>
                <a
                  href="/dashboard"
                  class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-indigo-50 dark:text-gray-300 dark:hover:bg-gray-600 dark:hover:text-white transition-colors duration-150"
                  role="menuitem"
                >
                  <svg class="w-4 h-4 mr-2 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M17.982 18.725A7.488 7.488 0 0012 15.75a7.488 7.488 0 00-5.982 2.975m11.963 0a9 9 0 10-11.963 0m11.963 0A8.966 8.966 0 0112 21a8.966 8.966 0 01-5.982-2.275M15 9.75a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  </svg>
                  Mi Perfil
                </a>
              </li>
              <li>
                <a
                  href="#"
                  class="flex items-center px-4 py-2 text-sm text-red-600 hover:bg-red-50 dark:text-red-300 dark:hover:bg-red-900/30 dark:hover:text-red-200 transition-colors duration-150"
                  id="logoutButton"
                  role="menuitem"
                >
                  <svg class="w-4 h-4 mr-2 text-red-500 dark:text-red-400" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15M12 9l-3 3m0 0l3 3m-3-3h12.75"></path>
                  </svg>
                  Cerrar Sesión
                </a>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Toast de notificación para mensajes del sistema -->
  <div id="toast-notification" class="fixed top-4 right-4 z-50 hidden flex items-center max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow-xl dark:text-gray-400 dark:bg-gray-800" role="alert">
    <div id="toast-icon-success" class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-green-500 bg-green-100 rounded-lg dark:bg-green-800 dark:text-green-200">
      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>
    </div>
    <div id="toast-icon-error" class="hidden inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-500 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200">
      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
    </div>
    <div class="ml-3 text-sm font-normal" id="toast-message">Acción completada exitosamente.</div>
    <button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-notification" aria-label="Close" id="close-toast">
      <span class="sr-only">Cerrar</span>
      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
    </button>
  </div>
</nav>

<script>
  const BASE_URL = "/api";
  
  // Funciones para mostrar notificaciones toast
  function showToast(message, type = 'success') {
    const toast = document.getElementById('toast-notification');
    const toastMessage = document.getElementById('toast-message');
    const successIcon = document.getElementById('toast-icon-success');
    const errorIcon = document.getElementById('toast-icon-error');
    
    if (toast && toastMessage) {
      toastMessage.textContent = message;
      
      // Configurar el tipo de notificación
      if (type === 'success') {
        successIcon.classList.remove('hidden');
        errorIcon.classList.add('hidden');
        toast.classList.remove('bg-red-50', 'dark:bg-red-900/30');
        toast.classList.add('bg-white', 'dark:bg-gray-800');
      } else {
        successIcon.classList.add('hidden');
        errorIcon.classList.remove('hidden');
        toast.classList.remove('bg-white', 'dark:bg-gray-800');
        toast.classList.add('bg-red-50', 'dark:bg-red-900/30');
      }
      
      // Mostrar y ocultar automáticamente
      toast.classList.remove('hidden');
      toast.classList.add('flex');
      
      // Auto-ocultar después de 3 segundos
      setTimeout(() => {
        toast.classList.add('hidden');
        toast.classList.remove('flex');
      }, 3000);
    }
  }
  
  // Manejador para cerrar toast manualmente
  document.getElementById('close-toast')?.addEventListener('click', () => {
    const toast = document.getElementById('toast-notification');
    if (toast) {
      toast.classList.add('hidden');
      toast.classList.remove('flex');
    }
  });

  // Cargar datos del usuario con manejo mejorado de estados
  async function cargarDatosUsuario() {
    // Mostrar elementos de skeleton
    const userDataSkeleton = document.getElementById('userDataSkeleton');
    const profileImageSkeleton = document.getElementById('profileImageSkeleton');
    const userNameElement = document.getElementById('user-name');
    const userEmailElement = document.getElementById('user-email');
    const userProfileImage = document.getElementById('userProfileImage');
    
    try {
      const userId = localStorage.getItem('userId');
      const userRole = localStorage.getItem('userRole');
      
      if (!userId) {
        // Redirigir al login si no hay usuario
        window.location.href = '/login';
        return;
      }

      // Actualizar la imagen de perfil según el rol
      if (userProfileImage && profileImageSkeleton) {
        // Determinar la imagen según el rol
        userProfileImage.src = userRole === 'secretaria' 
          ? '/images/perfil-logo-secretaria.png' 
          : '/images/perfil-logo.png';
        
        // Mostrar notificación si corresponde según el rol
        const notificationDot = document.getElementById('notificationDot');
        if (notificationDot && userRole === 'secretaria') {
          notificationDot.classList.remove('hidden');
        }
      }
      
      // Determinar el endpoint según el rol
      let endpoint = '';
      if (userRole === 'odontologo') {
        endpoint = `${BASE_URL}/medico/findById/${userId}`;
      } else if (userRole === 'secretaria') {
        endpoint = `${BASE_URL}/secretaria/buscarId/${userId}`;
      } else {
        throw new Error('Rol de usuario no reconocido');
      }
      
      // Realizar la petición con manejo de timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 8000);
      
      const response = await fetch(endpoint, { signal: controller.signal });
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        throw new Error(`Error al cargar datos del usuario (${response.status})`);
      }
      
      const data = await response.json();
      
      // Extraer datos según el rol
      let user;
      if (userRole === 'odontologo') {
        user = data.medico;
      } else {
        user = data.secretaria;
      }
      
      if (!user) {
        throw new Error('No se encontraron datos del usuario');
      }
      
      // Actualizar la UI con los datos del usuario
      setTimeout(() => {
        // Ocultar skeletons y mostrar datos
        if (userDataSkeleton) userDataSkeleton.classList.add('hidden');
        if (userNameElement) {
          userNameElement.textContent = user.nombre || 'Usuario';
          userNameElement.classList.remove('hidden');
        }
        
        if (userEmailElement) {
          userEmailElement.textContent = user.email || 'Sin email';
          userEmailElement.classList.remove('hidden');
        }

        // Mostrar imagen de perfil
        if (userProfileImage && profileImageSkeleton) {
          profileImageSkeleton.classList.add('hidden');
          userProfileImage.classList.remove('hidden');
          
          // Si el usuario tiene una foto personalizada, actualizarla
          if (user.photoUrl) {
            userProfileImage.src = user.photoUrl;
          }
        }
      }, 800); // Pequeño delay para que se vea el skeleton

    } catch (error) {
      // Manejo mejorado de errores
      if (error.name === 'AbortError') {
        showToast('Tiempo de espera agotado al cargar datos', 'error');
      } else {
        showToast('Error al cargar datos del usuario', 'error');
      }
      
      // Actualizar la UI para el caso de error
      setTimeout(() => {
        if (userDataSkeleton) userDataSkeleton.classList.add('hidden');
        if (userNameElement) {
          userNameElement.textContent = 'Error al cargar';
          userNameElement.classList.remove('hidden');
        }
        
        if (userEmailElement) {
          userEmailElement.classList.remove('hidden');
          userEmailElement.textContent = 'Intente nuevamente';
        }
        
        if (userProfileImage && profileImageSkeleton) {
          profileImageSkeleton.classList.add('hidden');
          userProfileImage.classList.remove('hidden');
        }
      }, 800);
    }
  }

  // Mejorar manejo del logout con confirmación
  const logoutButton = document.getElementById('logoutButton');
  if (logoutButton) {
    logoutButton.addEventListener('click', (e) => {
      e.preventDefault();
      
      // Mostrar notificación de cierre de sesión
      showToast('Cerrando sesión...', 'success');
      
      // Breve delay para mejor UX
      setTimeout(() => {
        localStorage.removeItem('userId');
        localStorage.removeItem('userRole');
        window.location.href = '/login';
      }, 1000);
    });
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    cargarDatosUsuario();
    
    // Inicializar dropdown y otros componentes UI
    const dropdownButton = document.getElementById('user-menu-button');
    const dropdownMenu = document.getElementById('dropdown-2');
    
    if (dropdownButton && dropdownMenu) {
      dropdownButton.addEventListener('click', () => {
        dropdownMenu.classList.toggle('hidden');
      });
      
      // Cerrar dropdown al hacer clic fuera de él
      document.addEventListener('click', (event) => {
        if (!dropdownButton.contains(event.target) && !dropdownMenu.contains(event.target)) {
          dropdownMenu.classList.add('hidden');
        }
      });
    }
  });
</script>
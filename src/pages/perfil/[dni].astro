---
import LayoutCommon from "../../app/LayoutCommon.astro";
import LayoutProtected from "../../app/LayoutProtected.astro";
import Atenciones from "../../components/Atenciones.astro";
import Dental from "../../components/Dental.astro";
import Prestaciones from "../../components/Prestaciones.astro";

const { dni } = Astro.params;

---

<LayoutProtected>
  <LayoutCommon>
    <div class="min-h-screen bg-gradient-to-r from-slate-50 to-slate-100 p-4 text-slate-800 dark:from-slate-900 dark:to-slate-800 dark:text-slate-100 lg:p-8 transition-all duration-300">
      <div class="mx-auto max-w-7xl">
        <!-- Header -->
        <div class="mb-8 flex flex-col space-y-3 sm:flex-row sm:items-center sm:justify-between sm:space-y-0">
          <div class="flex items-center space-x-3">
            <button 
              id="volverBtn" 
              class="group flex items-center text-blue-600 transition-colors duration-200 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
              aria-label="Volver a la página anterior"
            >
              <svg 
                class="mr-2 h-4 w-4 transform transition-transform duration-200 group-hover:-translate-x-1" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
              Volver
            </button>
            <h1 class="text-2xl font-bold text-slate-800 dark:text-slate-100 sm:text-3xl">Perfil del Paciente</h1>
          </div>
          <div class="flex space-x-2">
            <button 
              id="editarBtn" 
              class="inline-flex items-center justify-center rounded-lg bg-blue-100 px-4 py-2 text-sm font-medium text-blue-700 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-300 dark:bg-blue-900/30 dark:text-blue-300 dark:hover:bg-blue-800/50 transition-all duration-200"
              aria-label="Editar perfil del paciente"
            >
              <svg 
                class="mr-2 h-4 w-4" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
              </svg>
              Editar Perfil
            </button>
            <button 
              id="nuevaConsultaBtn" 
              class="inline-flex items-center justify-center rounded-lg bg-gradient-to-r from-blue-600 to-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-md hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-blue-300 dark:focus:ring-blue-800 transition-all duration-200 transform hover:shadow-lg"
              aria-label="Registrar nueva consulta"
            >
              <svg 
                class="mr-2 h-4 w-4" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
              </svg>
              Nueva Consulta
            </button>
          </div>
        </div>

        <!-- Skeleton loader -->
        <div id="profileSkeleton" class="animate-pulse">
          <div class="grid gap-6 md:grid-cols-2">
            <div class="rounded-xl bg-white p-6 shadow-xl dark:bg-gray-800">
              <div class="h-7 w-48 mb-6 bg-gray-200 rounded dark:bg-gray-700"></div>
              <div class="space-y-4">
                <div class="h-5 w-full bg-gray-200 rounded dark:bg-gray-700"></div>
                <div class="h-5 w-3/4 bg-gray-200 rounded dark:bg-gray-700"></div>
              </div>
            </div>
            <div class="rounded-xl bg-white p-6 shadow-xl dark:bg-gray-800">
              <div class="h-7 w-48 mb-6 bg-gray-200 rounded dark:bg-gray-700"></div>
              <div class="space-y-4">
                <div class="h-5 w-full bg-gray-200 rounded dark:bg-gray-700"></div>
                <div class="h-5 w-3/4 bg-gray-200 rounded dark:bg-gray-700"></div>
              </div>
            </div>
          </div>
          <div class="mt-6 rounded-xl bg-white p-6 shadow-xl dark:bg-gray-800">
            <div class="h-7 w-48 mb-6 bg-gray-200 rounded dark:bg-gray-700"></div>
            <div class="space-y-4">
              <div class="h-5 w-full bg-gray-200 rounded dark:bg-gray-700"></div>
              <div class="h-5 w-5/6 bg-gray-200 rounded dark:bg-gray-700"></div>
              <div class="h-5 w-11/12 bg-gray-200 rounded dark:bg-gray-700"></div>
            </div>
          </div>
        </div>

        <!-- Profile Content -->
        <div id="profileContent" class="hidden">
          <!-- Información de paciente en tarjetas -->
          <div class="grid gap-6 md:grid-cols-2">
            <!-- Datos Personales -->
            <div class="rounded-xl bg-white p-6 shadow-xl dark:bg-gray-800 transform transition-all duration-300 hover:shadow-2xl">
              <div class="mb-4 flex items-center">
                <svg class="mr-3 h-5 w-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                <h2 class="text-xl font-semibold text-slate-800 dark:text-slate-100">Datos Personales</h2>
              </div>
              <div class="space-y-4" id="datosPersonales"></div>
            </div>

            <!-- Información de Contacto -->
            <div class="rounded-xl bg-white p-6 shadow-xl dark:bg-gray-800 transform transition-all duration-300 hover:shadow-2xl">
              <div class="mb-4 flex items-center">
                <svg class="mr-3 h-5 w-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                </svg>
                <h2 class="text-xl font-semibold text-slate-800 dark:text-slate-100">Información de Contacto</h2>
              </div>
              <div class="space-y-4" id="infoContacto"></div>
            </div>
          </div>

          <!-- Navegación por pestañas -->
          <div class="mt-6">
            <div class="border-b border-gray-200 dark:border-gray-700">
              <nav class="-mb-px flex space-x-6 overflow-x-auto" aria-label="Tabs">
                <button id="tabHistoria" class="tab-btn tab-active border-blue-500 text-blue-600 dark:border-blue-400 dark:text-blue-400 whitespace-nowrap border-b-2 py-3 px-1 text-sm font-medium" aria-current="page">
                  Historia Clínica
                </button>
                <button id="tabDental" class="tab-btn border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 dark:text-gray-400 dark:hover:border-gray-600 dark:hover:text-gray-300 whitespace-nowrap border-b-2 py-3 px-1 text-sm font-medium">
                  Odontograma
                </button>
                <button id="tabPrestaciones" class="tab-btn border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 dark:text-gray-400 dark:hover:border-gray-600 dark:hover:text-gray-300 whitespace-nowrap border-b-2 py-3 px-1 text-sm font-medium">
                  Prestaciones
                </button>
                <button id="tabAtenciones" class="tab-btn border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 dark:text-gray-400 dark:hover:border-gray-600 dark:hover:text-gray-300 whitespace-nowrap border-b-2 py-3 px-1 text-sm font-medium">
                  Historial de Atenciones
                </button>
              </nav>
            </div>

            <!-- Contenido de pestañas -->
            <div class="tab-content rounded-xl bg-white p-6 shadow-xl dark:bg-gray-800 mt-6">
              <!-- Historia Clínica -->
              <div id="contentHistoria" class="tab-panel">
                <div class="space-y-6" id="historiaClinica">
                  <!-- Contenido cargado dinámicamente -->
                </div>
              </div>

              <!-- Odontograma -->
              <div id="contentDental" class="tab-panel hidden">
                <Dental dni={dni} />
              </div>

              <!-- Prestaciones -->
              <div id="contentPrestaciones" class="tab-panel hidden">
                <Prestaciones dni={dni} />
              </div>

              <!-- Atenciones -->
              <div id="contentAtenciones" class="tab-panel hidden">
                <Atenciones dni={dni} />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Toast Notification Container -->
    <div id="toastContainer" class="fixed bottom-5 right-5 z-50 space-y-3"></div>
  </LayoutCommon>
</LayoutProtected>

<script type="module" define:vars={{ dni }}>
const BASE_URL = "";

// Estado global de la aplicación
const state = {
  paciente: null,
  historiaClinica: null,
  loading: true,
  activeTab: 'Historia'
};

async function cargarPerfil() {
  mostrarSkeletonLoader(true);
  
  try {
    const pacienteResponse = await fetch(`${BASE_URL}/paciente/findByDni/${dni}`);
    if (!pacienteResponse.ok) throw new Error('Paciente no encontrado');
    
    const { paciente } = await pacienteResponse.json();
    state.paciente = paciente;

    if (paciente.historiaClinica) {
      try {
        const hcResponse = await fetch(`${BASE_URL}/historiaClinica/getHc/${paciente.historiaClinica}`);
        if (hcResponse.ok) {
          const { historiaClinica } = await hcResponse.json();
          state.historiaClinica = historiaClinica;
        }
      } catch (error) {
        console.error("Error al cargar historia clínica:", error);
        showToast("No se pudo cargar la historia clínica", "error");
      }
    }

    renderizarDatosPersonales(paciente);
    renderizarInfoContacto(paciente);
    renderizarHistoriaClinica(state.historiaClinica);
    
    mostrarSkeletonLoader(false);
  } catch (error) {
    showToast(error.message, 'error');
    mostrarSkeletonLoader(false);
  }
}

function mostrarSkeletonLoader(show) {
  state.loading = show;
  document.getElementById('profileSkeleton').classList.toggle('hidden', !show);
  document.getElementById('profileContent').classList.toggle('hidden', show);
}

function renderizarDatosPersonales(paciente) {
  const container = document.getElementById('datosPersonales');
  if (!container) return;
  
  container.innerHTML = `
    <div class="grid gap-4 md:grid-cols-2">
      <div class="rounded-lg bg-blue-50 p-4 dark:bg-blue-900/20">
        <label class="text-sm font-medium text-blue-800 dark:text-blue-300">Nombre Completo</label>
        <p class="mt-1 text-gray-900 dark:text-white font-medium">${paciente.nombre || 'No especificado'}</p>
      </div>
      <div class="rounded-lg bg-blue-50 p-4 dark:bg-blue-900/20">
        <label class="text-sm font-medium text-blue-800 dark:text-blue-300">DNI</label>
        <p class="mt-1 text-gray-900 dark:text-white font-medium">${paciente.dni || 'No especificado'}</p>
      </div>
      <div class="rounded-lg bg-blue-50 p-4 dark:bg-blue-900/20">
        <label class="text-sm font-medium text-blue-800 dark:text-blue-300">Edad</label>
        <p class="mt-1 text-gray-900 dark:text-white font-medium">${paciente.edad ? `${paciente.edad} años` : 'No especificada'}</p>
      </div>
      <div class="rounded-lg bg-blue-50 p-4 dark:bg-blue-900/20">
        <label class="text-sm font-medium text-blue-800 dark:text-blue-300">Obra Social</label>
        <p class="mt-1 text-gray-900 dark:text-white font-medium">${paciente.obraSocial || 'No especificada'}</p>
      </div>
    </div>
  `;
}

function renderizarInfoContacto(paciente) {
  const container = document.getElementById('infoContacto');
  if (!container) return;
  
  container.innerHTML = `
    <div class="grid gap-4 md:grid-cols-2">
      <div class="rounded-lg bg-blue-50 p-4 dark:bg-blue-900/20">
        <label class="text-sm font-medium text-blue-800 dark:text-blue-300">Email</label>
        <p class="mt-1 text-gray-900 dark:text-white font-medium break-all">${paciente.mail || 'No especificado'}</p>
      </div>
      <div class="rounded-lg bg-blue-50 p-4 dark:bg-blue-900/20">
        <label class="text-sm font-medium text-blue-800 dark:text-blue-300">Teléfono</label>
        <p class="mt-1 text-gray-900 dark:text-white font-medium">${paciente.areaCode || ''} ${paciente.telefono || 'No especificado'}</p>
      </div>
      <div class="rounded-lg bg-blue-50 p-4 dark:bg-blue-900/20 md:col-span-2">
        <label class="text-sm font-medium text-blue-800 dark:text-blue-300">Dirección</label>
        <p class="mt-1 text-gray-900 dark:text-white font-medium">${paciente.direccion || 'No especificada'}</p>
      </div>
    </div>
  `;
}

function renderizarHistoriaClinica(hc) {
  const container = document.getElementById('historiaClinica');
  if (!container) return;
  
  if (!hc) {
    container.innerHTML = `
      <div class="flex flex-col items-center justify-center py-10 text-center">
        <div class="mb-4 rounded-full bg-blue-50 p-3 dark:bg-blue-900/30">
          <svg class="h-8 w-8 text-blue-500 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 dark:text-white">No hay historia clínica disponible</h3>
        <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">Esta es la primera visita del paciente o aún no se ha creado su historia clínica.</p>
        <button id="crearHistoriaBtn" class="mt-4 inline-flex items-center rounded-lg bg-blue-600 px-4 py-2 text-center text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
          <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Crear Historia Clínica
        </button>
      </div>
    `;
    
    // Añadir event listener al botón
    document.getElementById('crearHistoriaBtn')?.addEventListener('click', () => {
      // Implementar funcionalidad para crear historia clínica
      showToast("Funcionalidad en desarrollo", "info");
    });
    
    return;
  }
  
  container.innerHTML = `
    <div class="space-y-6">
      <!-- Sección Información General -->
      <section class="rounded-xl border border-gray-200 p-6 dark:border-gray-700 transition-all duration-200 hover:border-blue-300 dark:hover:border-blue-600 hover:shadow-md">
        <div class="mb-4 flex items-center">
          <svg class="mr-3 h-5 w-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          <h3 class="text-lg font-semibold text-slate-800 dark:text-slate-100">Información General</h3>
        </div>
        <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
          ${renderizarCampo('Alergias', hc.alergia, 'allergy')}
          ${renderizarCampo('Padece Enfermedad', hc.padeceEnfermedad, 'disease')}
          ${renderizarCampo('Paciente Cardíaco', hc.esPacienteCardiaco ? 'Sí' : 'No', 'heart')}
          ${renderizarCampo('Medicación', hc.tomaMedicacion, 'medication')}
          ${renderizarCampo('Estado Actual de la Boca', hc.estadoActualBoca, 'mouth')}
        </div>
      </section>

      <!-- Sección Historial de Dolor -->
      <section class="rounded-xl border border-gray-200 p-6 dark:border-gray-700 transition-all duration-200 hover:border-blue-300 dark:hover:border-blue-600 hover:shadow-md">
        <div class="mb-4 flex items-center">
          <svg class="mr-3 h-5 w-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636"></path>
          </svg>
          <h3 class="text-lg font-semibold text-slate-800 dark:text-slate-100">Historial de Dolor</h3>
        </div>
        <div class="p-4 rounded-lg bg-amber-50 dark:bg-amber-900/20">
          <p class="text-gray-800 dark:text-gray-200">${formatearDolor(hc.dolor)}</p>
        </div>
      </section>

      <!-- Sección Anotaciones del Médico -->
      <section class="rounded-xl border border-gray-200 p-6 dark:border-gray-700 transition-all duration-200 hover:border-blue-300 dark:hover:border-blue-600 hover:shadow-md">
        <details class="group" open>
          <summary class="flex cursor-pointer items-center">
            <svg class="mr-3 h-5 w-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
            </svg>
            <h3 class="text-lg font-semibold text-slate-800 dark:text-slate-100">Anotaciones del Médico</h3>
            <svg class="ml-auto h-5 w-5 transform text-gray-500 transition duration-300 group-open:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </summary>
          <div class="mt-4 p-4 rounded-lg bg-gray-50 dark:bg-gray-700/50">
            <p class="text-gray-700 dark:text-gray-300 whitespace-pre-line">${hc.anotacionesMedico || 'Sin anotaciones'}</p>
          </div>
        </details>
      </section>
      
      <!-- Última actualización -->
      <div class="text-right text-xs text-gray-500 dark:text-gray-400">
        <p>Última actualización: ${formatearFecha(hc.updatedAt || hc.createdAt)}</p>
      </div>
    </div>
  `;
}

function renderizarCampo(label, valor, iconType = null) {
  let iconPath = '';
  
  // Seleccionar icono según el tipo de campo
  switch (iconType) {
    case 'allergy':
      iconPath = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>';
      break;
    case 'disease':
      iconPath = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>';
      break;
    case 'heart':
      iconPath = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>';
      break;
    case 'medication':
      iconPath = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>';
      break;
    case 'mouth':
      iconPath = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7h16M4 11h16M4 15h8"></path>';
      break;
    default:
      iconPath = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>';
  }
  
  return `
    <div class="rounded-lg bg-gray-50 p-4 dark:bg-gray-800 transition-all duration-200 hover:bg-blue-50 dark:hover:bg-blue-900/20">
      <div class="mb-2 flex items-center">
        <svg class="mr-2 h-4 w-4 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          ${iconPath}
        </svg>
        <label class="text-sm font-medium text-gray-700 dark:text-gray-300">${label}</label>
      </div>
      <p class="break-words text-gray-900 dark:text-white">${valor || 'No especificado'}</p>
    </div>
  `;
}

function formatearDolor(dolorStr) {
  try {
    if (!dolorStr) return 'No especificado';
    
    const dolor = JSON.parse(dolorStr);
    const parts = [];
    
    if (dolor.rango) parts.push(`<span class="font-medium">Intensidad:</span> ${dolor.rango}`);
    if (dolor.tipo) parts.push(`<span class="font-medium">Tipo:</span> ${dolor.tipo}`);
    if (dolor.caracteristicas?.length) parts.push(`<span class="font-medium">Características:</span> ${dolor.caracteristicas.join(', ')}`);
    if (dolor.sensibilidad?.length) parts.push(`<span class="font-medium">Sensibilidad:</span> ${dolor.sensibilidad.join(', ')}`);
    if (dolor.localizacion) {
      const localizacion = dolor.localizacion
        .replace(/([A-Z])/g, ' $1')
        .toLowerCase()
        .replace(/^./, str => str.toUpperCase());
      parts.push(`<span class="font-medium">Localización:</span> ${localizacion}`);
    }
    return parts.join('<br>') || 'No especificado';
  } catch {
    return dolorStr || 'No especificado';
  }
}

function formatearFecha(fechaStr) {
  if (!fechaStr) return 'Fecha desconocida';
  
  try {
    const fecha = new Date(fechaStr);
    return new Intl.DateTimeFormat('es-AR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(fecha);
  } catch {
    return fechaStr;
  }
}

function showToast(message, type = "success") {
  const toastContainer = document.getElementById("toastContainer");
  
  if (!toastContainer) return;
  
  const toast = document.createElement("div");
  const bgColor = type === "success" 
    ? "bg-green-50 border-green-500 text-green-800 dark:bg-green-900/30 dark:text-green-200 dark:border-green-600" 
    : type === "info"
    ? "bg-blue-50 border-blue-500 text-blue-800 dark:bg-blue-900/30 dark:text-blue-200 dark:border-blue-600"
    : "bg-red-50 border-red-500 text-red-800 dark:bg-red-900/30 dark:text-red-200 dark:border-red-600";
  
  const iconColor = type === "success" 
    ? "text-green-600 dark:text-green-400" 
    : type === "info"
    ? "text-blue-600 dark:text-blue-400"
    : "text-red-600 dark:text-red-400";
    
  const iconPath = type === "success" 
    ? "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" 
    : type === "info"
    ? "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
    : "M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z";
  
  toast.className = `flex items-center w-full max-w-sm p-4 mb-4 rounded-lg shadow-lg border-l-4 ${bgColor} transform transition-all duration-300 ease-out translate-x-full opacity-0`;
  toast.innerHTML = `
    <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 ${iconColor}">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${iconPath}"></path>
      </svg>
    </div>
    <div class="ml-3 text-sm font-normal">${message}</div>
    <button type="button" class="ml-auto -mx-1.5 -my-1.5 rounded-lg p-1.5 hover:bg-gray-200 dark:hover:bg-gray-700 inline-flex h-8 w-8" aria-label="Cerrar">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  `;
  
  toastContainer.appendChild(toast);
  
  // Añadir event listener para cerrar
  toast.querySelector("button").addEventListener("click", () => {
    toast.classList.add("translate-x-full", "opacity-0");
    setTimeout(() => toast.remove(), 300);
  });
  
  // Animación de entrada
  setTimeout(() => {
    toast.classList.remove("translate-x-full", "opacity-0");
  }, 10);
  
  // Auto cerrar después de 5 segundos
  setTimeout(() => {
    if (toast.parentNode) {
      toast.classList.add("translate-x-full", "opacity-0");
      setTimeout(() => toast.remove(), 300);
    }
  }, 5000);
}

// Gestión de pestañas
function setupTabs() {
  const tabButtons = document.querySelectorAll('.tab-btn');
  const tabPanels = document.querySelectorAll('.tab-panel');
  
  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Obtener el ID del contenido a mostrar
      const tabId = button.id.replace('tab', 'content');
      
      // Actualizar estado activo de las pestañas
      tabButtons.forEach(btn => {
        btn.classList.remove('tab-active', 'border-blue-500', 'text-blue-600', 'dark:border-blue-400', 'dark:text-blue-400');
        btn.classList.add('border-transparent', 'text-gray-500', 'hover:border-gray-300', 'hover:text-gray-700', 'dark:text-gray-400', 'dark:hover:border-gray-600', 'dark:hover:text-gray-300');
      });
      
      button.classList.remove('border-transparent', 'text-gray-500', 'hover:border-gray-300', 'hover:text-gray-700', 'dark:text-gray-400', 'dark:hover:border-gray-600', 'dark:hover:text-gray-300');
      button.classList.add('tab-active', 'border-blue-500', 'text-blue-600', 'dark:border-blue-400', 'dark:text-blue-400');
      
      // Ocultar todos los paneles y mostrar el seleccionado
      tabPanels.forEach(panel => {
        panel.classList.add('hidden');
      });
      
      document.getElementById(tabId)?.classList.remove('hidden');
    });
  });
}

// Event listeners
document.addEventListener('DOMContentLoaded', () => {
  cargarPerfil();
  setupTabs();
  
  // Navegación
  document.getElementById('volverBtn')?.addEventListener('click', () => window.history.back());
  
  // Botones de acción
  document.getElementById('editarBtn')?.addEventListener('click', () => {
    window.location.href = `/paciente/editar/${dni}`;
  });
  
  document.getElementById('nuevaConsultaBtn')?.addEventListener('click', () => {
    window.location.href = `/consulta/nueva/${dni}`;
  });
  
  // Event listener para toasts
  document.getElementById("toastContainer")?.addEventListener("click", (e) => {
    if (e.target.closest("button")) {
      const toast = e.target.closest("div");
      if (toast) {
        toast.classList.add("translate-x-full", "opacity-0");
        setTimeout(() => toast.remove(), 300);
      }
    }
  });
});

// Para compatibilidad con Astro View Transitions
document.addEventListener('astro:page-load', () => {
  cargarPerfil();
  setupTabs();
});
</script>
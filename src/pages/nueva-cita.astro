---
import LayoutCommon from "../app/LayoutCommon.astro";
import LayoutProtected from "../app/LayoutProtected.astro";
---

<LayoutProtected>
<LayoutCommon>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/es.js"></script>

  <div class="min-h-screen bg-gradient-to-r from-slate-50 to-slate-100 p-4 dark:from-slate-900 dark:to-slate-800 dark:text-slate-100 sm:p-6 lg:p-8">
    <div class="mx-auto max-w-4xl animate-fadeIn">
      <!-- Encabezado -->
      <div class="mb-6">
        <button id="volverBtn" class="group flex items-center text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 transform group-hover:-translate-x-1 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Volver a citas
        </button>
      </div>

      <!-- Panel principal -->
      <div class="bg-white dark:bg-gray-800 rounded-xl shadow-xl overflow-hidden border border-gray-100 dark:border-gray-700">
        <!-- Cabecera del formulario -->
        <div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 px-6 py-6 border-b border-gray-200 dark:border-gray-700">
          <h1 class="text-2xl sm:text-3xl font-bold text-gray-800 dark:text-white flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-3 text-blue-600 dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            Nueva Cita
          </h1>
          <p class="mt-2 text-gray-600 dark:text-gray-300">Complete el formulario para agendar una nueva cita odontológica</p>
        </div>
        
        <!-- Formulario -->
        <form id="nuevaConsultaForm" class="p-6">
          <div class="space-y-6">
            <!-- Sección de Paciente y Profesional -->
            <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
              <!-- Selector de Paciente -->
              <div class="space-y-2">
                <label for="nombrePaciente" class="block text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  Paciente
                </label>
                <div class="relative">
                  <select
                    id="nombrePaciente"
                    name="nombrePaciente"
                    required
                    class="appearance-none block w-full rounded-lg border border-gray-300 bg-white px-4 py-3 pr-8 text-gray-700 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:placeholder-gray-400 transition-colors"
                  >
                    <option value="">Seleccione un paciente</option>
                  </select>
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 dark:text-gray-400">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </div>
                </div>
                <p id="pacienteHelp" class="mt-1 text-xs text-gray-500 dark:text-gray-400">Seleccione el paciente para esta cita</p>
              </div>
        
              <!-- Selector de Profesional -->
              <div class="space-y-2">
                <label for="nombreMedico" class="block text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 4v12l-4-2-4 2V4M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Profesional
                </label>
                <div class="relative">
                  <select
                    id="nombreMedico"
                    name="nombreMedico"
                    required
                    class="appearance-none block w-full rounded-lg border border-gray-300 bg-white px-4 py-3 pr-8 text-gray-700 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:placeholder-gray-400 transition-colors"
                  >
                    <option value="">Seleccione un profesional</option>
                  </select>
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 dark:text-gray-400">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </div>
                </div>
                <p id="medicoHelp" class="mt-1 text-xs text-gray-500 dark:text-gray-400">Elija el profesional que atenderá la cita</p>
              </div>
            </div>
            
            <!-- Sección de Fecha y Hora -->
            <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
              <!-- Selector de Día -->
              <div class="space-y-2">
                <label for="diaConsulta" class="block text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Fecha de la Cita
                </label>
                <div class="relative">
                  <input
                    type="text"
                    id="diaConsulta"
                    name="diaConsulta"
                    required
                    placeholder="Seleccionar fecha"
                    class="block w-full rounded-lg border border-gray-300 bg-white px-4 py-3 pr-10 text-gray-700 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:placeholder-gray-400 transition-colors"
                  />
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 dark:text-gray-400">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  </div>
                </div>
                <p id="fechaHelp" class="mt-1 text-xs text-gray-500 dark:text-gray-400">Seleccione la fecha para la cita</p>
              </div>
        
              <!-- Selector de Hora -->
              <div class="space-y-2">
                <label for="horaConsulta" class="block text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  Hora de la Cita
                </label>
                <div class="relative">
                  <input
                    type="text"
                    id="horaConsulta"
                    name="horaConsulta"
                    required
                    placeholder="Seleccionar hora"
                    class="block w-full rounded-lg border border-gray-300 bg-white px-4 py-3 pr-10 text-gray-700 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:placeholder-gray-400 transition-colors"
                  />
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 dark:text-gray-400">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                </div>
                <p id="horaHelp" class="mt-1 text-xs text-gray-500 dark:text-gray-400">Seleccione la hora para la cita</p>
              </div>
            </div>
            
            <!-- Sección de Motivo -->
            <div class="space-y-2">
              <label for="problema" class="block text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                </svg>
                Motivo de la Consulta
              </label>
              <textarea
                id="problema"
                name="problema"
                rows="3"
                required
                placeholder="Describa el motivo de la consulta"
                class="block w-full rounded-lg border border-gray-300 bg-white px-4 py-3 text-gray-700 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:placeholder-gray-400 transition-colors resize-none"
              ></textarea>
              <p id="motivoHelp" class="mt-1 text-xs text-gray-500 dark:text-gray-400">
                Describa brevemente el motivo de la consulta o el problema del paciente
              </p>
            </div>
            
            <!-- Sección de Tratamientos -->
            <div class="space-y-2">
              <label for="tratamientos" class="block text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
                </svg>
                Tratamientos
              </label>
              
              <!-- Contenedor de tratamientos dinámicos -->
              <div id="tratamientosContainer" class="space-y-3 rounded-lg border border-gray-200 dark:border-gray-700 p-4 bg-gray-50 dark:bg-gray-800/50">
                <div class="flex items-center gap-3">
                  <div class="relative flex-grow">
                    <select
                      name="tratamientos[]"
                      required
                      class="appearance-none block w-full rounded-lg border border-gray-300 bg-white px-4 py-3 pr-8 text-gray-700 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:placeholder-gray-400 transition-colors"
                    >
                      <option value="">Seleccione un tratamiento</option>
                    </select>
                    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 dark:text-gray-400">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                      </svg>
                    </div>
                  </div>
                  <button
                    type="button"
                    id="addTratamientoBtn"
                    class="inline-flex items-center justify-center rounded-lg bg-blue-600 px-3 py-3 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 transition-all duration-200"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    <span class="sr-only">Añadir tratamiento</span>
                  </button>
                </div>
              </div>
              <p id="tratamientoHelp" class="mt-1 text-xs text-gray-500 dark:text-gray-400">
                Puede agregar uno o más tratamientos para esta cita
              </p>
            </div>
          </div>
          
          <!-- Resumen de la cita (previsualizacón) -->
          <div id="resumenCita" class="mt-8 p-4 rounded-lg bg-blue-50 dark:bg-blue-900/20 border border-blue-100 dark:border-blue-800 hidden">
            <h3 class="text-md font-semibold text-blue-800 dark:text-blue-300 flex items-center mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Resumen de la Cita
            </h3>
            <div class="text-sm text-blue-700 dark:text-blue-200 space-y-1" id="resumenContent">
              <!-- Se llena dinámicamente -->
            </div>
          </div>
          
          <!-- Botones de acción -->
          <div class="mt-8 flex flex-col-reverse sm:flex-row sm:justify-between items-center gap-4">
            <button
              type="button"
              id="cancelarBtn"
              class="w-full sm:w-auto inline-flex justify-center items-center rounded-lg border border-gray-300 bg-white px-4 py-2.5 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 -ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
              Cancelar
            </button>
            
            <div class="flex flex-col sm:flex-row gap-3 w-full sm:w-auto">
              <button
                type="button"
                id="previewBtn"
                class="inline-flex justify-center items-center rounded-lg border border-blue-300 bg-blue-50 px-4 py-2.5 text-sm font-medium text-blue-700 shadow-sm hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-blue-800 dark:bg-blue-900/30 dark:text-blue-300 dark:hover:bg-blue-900/50 transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 -ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
                Vista previa
              </button>
              
              <button
                type="submit"
                id="submitBtn"
                class="inline-flex justify-center items-center rounded-lg bg-blue-600 px-4 py-2.5 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-blue-600 dark:hover:bg-blue-700 transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 -ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                Crear Cita
                <span id="loadingIndicator" class="hidden ml-2">
                  <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                </span>
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Notificaciones Toast -->
  <div id="toastContainer" class="fixed bottom-4 right-4 z-50"></div>
</LayoutCommon>
</LayoutProtected>

<script>
const BASE_URL = "/api";
const form = document.getElementById('nuevaConsultaForm');
const volverBtn = document.getElementById('volverBtn');
const cancelarBtn = document.getElementById('cancelarBtn');
const previewBtn = document.getElementById('previewBtn');
const submitBtn = document.getElementById('submitBtn');
const loadingIndicator = document.getElementById('loadingIndicator');
const resumenCita = document.getElementById('resumenCita');
const resumenContent = document.getElementById('resumenContent');

// Inicializar Flatpickr para fecha y hora
function initializeFlatpickr() {
  flatpickr("#diaConsulta", {
    dateFormat: "Y-m-d",
    locale: "es",
    minDate: "today",
    disableMobile: "true",
    altInput: true,
    altFormat: "j F Y",
    position: "auto",
    animate: true
  });

  flatpickr("#horaConsulta", {
    enableTime: true,
    noCalendar: true,
    dateFormat: "H:i",
    time_24hr: true,
    locale: "es",
    disableMobile: "true",
    position: "auto",
    animate: true,
    minuteIncrement: 15
  });
}

// Función para previsualizar la cita
function previewCita() {
  const formData = new FormData(form);
  const pacienteSelect = document.getElementById('nombrePaciente');
  const medicoSelect = document.getElementById('nombreMedico');
  const diaInput = document.getElementById('diaConsulta');
  const horaInput = document.getElementById('horaConsulta');
  const problema = formData.get('problema');
  
  let pacienteNombre = '';
  let medicoNombre = '';
  
  try {
    if (pacienteSelect.value) {
      const pacienteData = JSON.parse(pacienteSelect.value);
      pacienteNombre = pacienteData.nombre;
    }
  } catch (error) {
    pacienteNombre = pacienteSelect.options[pacienteSelect.selectedIndex]?.text || '';
  }
  
  medicoNombre = medicoSelect.options[medicoSelect.selectedIndex]?.text || '';
  
  // Obtener y formatear fecha y hora
  const fecha = diaInput._flatpickr?.altInput?.value || diaInput.value;
  const hora = horaInput._flatpickr?.input?.value || horaInput.value;
  
  // Recopilar tratamientos seleccionados
  const tratamientosSelects = form.querySelectorAll('select[name="tratamientos[]"]');
  const tratamientos = Array.from(tratamientosSelects)
    .map(select => {
      if (select.value) {
        try {
          const tratData = JSON.parse(select.value);
          return tratData.nombre;
        } catch (e) {
          return select.options[select.selectedIndex]?.text || '';
        }
      }
      return null;
    })
    .filter(nombre => nombre !== null);
  
  // Verificar si hay datos suficientes para mostrar
  if (!pacienteNombre && !medicoNombre && !fecha && !hora && !problema && tratamientos.length === 0) {
    showToast('Complete algunos campos para ver la vista previa', 'warning');
    return;
  }
  
  // Construir HTML del resumen
  let resumenHTML = '';
  
  if (pacienteNombre) {
    resumenHTML += `<p><strong>Paciente:</strong> ${pacienteNombre}</p>`;
  }
  
  if (medicoNombre) {
    resumenHTML += `<p><strong>Profesional:</strong> ${medicoNombre}</p>`;
  }
  
  if (fecha || hora) {
    resumenHTML += `<p><strong>Fecha y hora:</strong> ${fecha || ''} ${hora ? 'a las ' + hora + ' hs' : ''}</p>`;
  }
  
  if (problema) {
    resumenHTML += `<p><strong>Motivo:</strong> ${problema}</p>`;
  }
  
  if (tratamientos.length > 0) {
    resumenHTML += `<p><strong>Tratamientos:</strong> ${tratamientos.join(', ')}</p>`;
  }
  
  // Mostrar el resumen
  resumenContent.innerHTML = resumenHTML;
  resumenCita.classList.remove('hidden');
  
  // Desplazar a la previsualización
  resumenCita.scrollIntoView({ behavior: 'smooth', block: 'center' });
}

// Mejorar la notificación con toast
function showToast(message, type = 'success') {
  const toastContainer = document.getElementById('toastContainer');
  const existingToast = document.querySelector('.toast-notification');
  if (existingToast) {
    existingToast.remove();
  }
  
  const toast = document.createElement('div');
  
  // Configurar colores y iconos según el tipo de notificación
  let bgColor, textColor, icon;
  switch (type) {
    case 'success':
      bgColor = 'bg-green-500';
      textColor = 'text-white';
      icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
      break;
    case 'error':
      bgColor = 'bg-red-500';
      textColor = 'text-white';
      icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
      break;
    case 'warning':
      bgColor = 'bg-yellow-500';
      textColor = 'text-white';
      icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path></svg>';
      break;
    default:
      bgColor = 'bg-blue-500';
      textColor = 'text-white';
      icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
  }
  
  toast.className = `toast-notification flex items-center px-4 py-3 rounded-lg shadow-lg ${bgColor} ${textColor} max-w-md transform translate-y-8 opacity-0 transition-all duration-300`;
  
  toast.innerHTML = `
    <div class="flex items-center">
      ${icon}
      <span>${message}</span>
    </div>
    <button class="ml-auto text-white hover:text-gray-200 focus:outline-none">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  `;
  
  toastContainer.appendChild(toast);
  
  // Animar entrada
  setTimeout(() => {
    toast.classList.replace('translate-y-8', 'translate-y-0');
    toast.classList.replace('opacity-0', 'opacity-100');
  }, 50);
  
  // Agregar evento para cerrar el toast
  toast.querySelector('button').addEventListener('click', () => {
    closeToast(toast);
  });
  
  // Auto cerrar después de 5 segundos
  setTimeout(() => {
    closeToast(toast);
  }, 5000);
}

function closeToast(toast) {
  toast.classList.replace('translate-y-0', 'translate-y-8');
  toast.classList.replace('opacity-100', 'opacity-0');
  
  setTimeout(() => {
    toast.remove();
  }, 300);
}

// Agregar un tratamiento al formulario
document.getElementById('addTratamientoBtn')?.addEventListener('click', () => {
  const tratamientosContainer = document.getElementById('tratamientosContainer');

  const tratamientoGroup = document.createElement('div');
  tratamientoGroup.classList.add('flex', 'items-center', 'gap-3', 'animate-fadeIn');

  const selectContainer = document.createElement('div');
  selectContainer.classList.add('relative', 'flex-grow');

  const select = document.createElement('select');
  select.name = 'tratamientos[]';
  select.required = true;
  select.classList.add(
    'appearance-none',
    'block',
    'w-full',
    'rounded-lg',
    'border',
    'border-gray-300',
    'bg-white',
    'px-4',
    'py-3',
    'pr-8',
    'text-gray-700',
    'shadow-sm',
    'focus:border-blue-500',
    'focus:ring-blue-500',
    'dark:border-gray-600',
    'dark:bg-gray-700',
    'dark:text-gray-100',
    'transition-colors'
  );

  const defaultOption = document.createElement('option');
  defaultOption.value = '';
  defaultOption.textContent = 'Seleccione un tratamiento';
  select.appendChild(defaultOption);

  const iconContainer = document.createElement('div');
  iconContainer.classList.add('pointer-events-none', 'absolute', 'inset-y-0', 'right-0', 'flex', 'items-center', 'px-3', 'text-gray-500', 'dark:text-gray-400');
  iconContainer.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>';

  selectContainer.appendChild(select);
  selectContainer.appendChild(iconContainer);

  const removeButton = document.createElement('button');
  removeButton.type = 'button';
  removeButton.classList.add(
    'inline-flex',
    'items-center',
    'justify-center',
    'rounded-lg',
    'bg-red-600',
    'px-3',
    'py-3',
    'text-white',
    'hover:bg-red-700',
    'focus:outline-none',
    'focus:ring-4',
    'focus:ring-red-300',
    'dark:bg-red-600',
    'dark:hover:bg-red-700',
    'transition-all',
    'duration-200'
  );
  removeButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" /></svg><span class="sr-only">Eliminar tratamiento</span>';
  removeButton.addEventListener('click', () => {
    tratamientoGroup.classList.add('animate-fadeOut');
    setTimeout(() => {
      tratamientoGroup.remove();
    }, 300);
  });

  tratamientoGroup.appendChild(selectContainer);
  tratamientoGroup.appendChild(removeButton);
  tratamientosContainer?.appendChild(tratamientoGroup);

  cargarTratamientos(select);
});

// Manejar el envío del formulario
form?.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  // Mostrar indicador de carga
  loadingIndicator.classList.remove('hidden');
  submitBtn.disabled = true;
  
  try {
    const formData = new FormData(form);
    const pacienteDataString = formData.get('nombrePaciente');
    
    if (!pacienteDataString) {
      throw new Error('No se seleccionó ningún paciente');
    }

    const pacienteData = JSON.parse(pacienteDataString);
    
    // Obtener fecha y hora formateadas
    const fecha = document.getElementById('diaConsulta').value;
    const hora = document.getElementById('horaConsulta').value;
    
    if (!fecha || !hora) {
      throw new Error('La fecha y hora son requeridas');
    }
    
    // Obtener y procesar los tratamientos seleccionados
    const tratamientosSelects = form.querySelectorAll('select[name="tratamientos[]"]');
    const tratamientos = Array.from(tratamientosSelects)
      .map(select => {
        if (select.value) {
          // Parsear el JSON almacenado en el value
          return JSON.parse(select.value);
        }
        return null;
      })
      .filter(tratamiento => tratamiento !== null); // Eliminar valores nulos

    const citaData = {
      pacienteId: pacienteData.id,
      medicoId: formData.get('nombreMedico'),
      fecha: new Date(`${fecha}T${hora}`).toISOString(),
      motivo: formData.get('problema'),
      estado: 'pendiente',
      notas: formData.get('problema'),
      monto: 0,
      tratamientos: tratamientos
    };

    console.log('Datos de la cita:', citaData);

    // Enviar datos a la API
    const response = await fetch(`${BASE_URL}/citas/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Origin': 'http://localhost:4321'
      },
      body: JSON.stringify(citaData)
    });

    const responseData = await response.json();
    console.log('Respuesta del servidor:', responseData);

    if (!response.ok) throw new Error(responseData.message || 'Error al crear la cita');

    // Mostrar éxito y redirigir
    showToast('Cita creada exitosamente', 'success');
    setTimeout(() => {
      window.location.href = '/citasTable';
    }, 1500);
    
  } catch (error) {
    console.error('Error completo:', error);
    showToast(error.message || 'Error al crear la cita', 'error');
    
    // Ocultar indicador de carga
    loadingIndicator.classList.add('hidden');
    submitBtn.disabled = false;
  }
});

// Cargar tratamientos desde la API
async function cargarTratamientos(selectElement) {
  try {
    const response = await fetch(`${BASE_URL}/tratamientos`);
    if (!response.ok) throw new Error('Error al cargar tratamientos');

    const data = await response.json();
    data.forEach((tratamiento) => {
      const option = document.createElement('option');
      // Guardar el objeto tratamiento completo como valor
      option.value = JSON.stringify({
        _id: tratamiento._id,
        nombre: tratamiento.nombre,
        descripcion: tratamiento.descripcion
      });
      option.textContent = tratamiento.nombre;
      option.className = 'text-gray-900 dark:text-gray-100';
      selectElement.appendChild(option);
    });
  } catch (error) {
    console.error('Error al cargar tratamientos:', error);
    showToast('Error al cargar la lista de tratamientos', 'error');
  }
}

// Cargar médicos desde la API
async function cargarMedicos() {
  try {
    const response = await fetch(`${BASE_URL}/medico`);
    if (!response.ok) throw new Error('Error al cargar médicos');

    const data = await response.json();
    const medicos = data.medicos;
    const selectMedico = document.getElementById('nombreMedico');

    if (selectMedico) {
      medicos.forEach((medico) => {
        const option = document.createElement('option');
        option.value = medico._id; // Usar el ID del médico
        option.textContent = `${medico.nombre} - ${medico.especialidad || 'Sin especialidad'}`;
        selectMedico.appendChild(option);
      });
    }
  } catch (error) {
    console.error('Error:', error);
    showToast('Error al cargar médicos', 'error');
  }
}

// Cargar pacientes desde la API
async function cargarPacientes() {
  try {
    const response = await fetch(`${BASE_URL}/paciente`);
    if (!response.ok) throw new Error('Error al cargar pacientes');

    const data = await response.json();
    const selectPaciente = document.getElementById('nombrePaciente');

    data.pacientes.forEach(paciente => {
      const option = document.createElement('option');
      const pacienteData = {
        id: paciente.id, 
        nombre: paciente.nombre,
        areaCode: paciente.areaCode,
        telefono: paciente.telefono
      };
      
      option.value = JSON.stringify(pacienteData);
      option.textContent = `${paciente.nombre} - DNI: ${paciente.dni || 'No disponible'}`;
      selectPaciente.appendChild(option);
    });
  } catch (error) {
    console.error('Error al cargar pacientes:', error);
    showToast('Error al cargar pacientes', 'error');
  }
}

// Configurar botones
volverBtn?.addEventListener('click', () => {
  window.location.href = '/citasTable';
});

cancelarBtn?.addEventListener('click', () => {
  const confirmBox = confirm('¿Está seguro que desea cancelar? Se perderán los datos ingresados.');
  if (confirmBox) {
    window.location.href = '/citasTable';
  }
});

previewBtn?.addEventListener('click', () => {
  previewCita();
});

// Inicializar en carga del documento
document.addEventListener('DOMContentLoaded', () => {
  initializeFlatpickr();
  cargarMedicos();
  cargarPacientes();
  cargarTratamientos(document.querySelector('select[name="tratamientos[]"]'));
});
</script>

<style>
/* Animaciones */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes fadeOut {
  from { opacity: 1; transform: translateY(0); }
  to { opacity: 0; transform: translateY(10px); }
}

.animate-fadeIn {
  animation: fadeIn 0.3s ease-out forwards;
}

.animate-fadeOut {
  animation: fadeOut 0.3s ease-out forwards;
}

/* Estilos para flatpickr */
:global(.flatpickr-calendar) {
  @apply rounded-lg shadow-lg border border-gray-200 !important;
}

:global(.flatpickr-calendar.arrowTop:after) {
  @apply border-b-white dark:border-b-gray-800 !important;
}

:global(.flatpickr-calendar.arrowTop:before) {
  @apply border-b-gray-300 dark:border-b-gray-600 !important;
}

:global(.dark .flatpickr-calendar) {
  @apply bg-gray-800 border-gray-700 !important;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.2), 0 4px 6px -2px rgba(0, 0, 0, 0.1) !important;
}

:global(.dark .flatpickr-day) {
  @apply text-gray-300 !important;
}

:global(.dark .flatpickr-day:hover) {
  @apply bg-gray-700 !important;
}

:global(.dark .flatpickr-day.selected) {
  @apply bg-blue-600 border-blue-600 text-white !important;
}

:global(.dark .flatpickr-day.today) {
  @apply border-blue-400 !important;
}

:global(.dark .flatpickr-months .flatpickr-prev-month, .dark .flatpickr-months .flatpickr-next-month) {
  @apply text-gray-400 fill-gray-400 !important;
}

:global(.dark .flatpickr-months .flatpickr-prev-month:hover, .dark .flatpickr-months .flatpickr-next-month:hover) {
  @apply text-gray-200 fill-gray-200 !important;
}

:global(.dark .flatpickr-current-month) {
  @apply text-gray-100 !important;
}

:global(.dark .flatpickr-weekday) {
  @apply text-gray-300 !important;
}

:global(.dark .flatpickr-time .numInputWrapper) {
  @apply text-gray-300 !important;
}

:global(.dark .flatpickr-time input) {
  @apply text-gray-300 !important;
}

:global(.dark .flatpickr-time .flatpickr-am-pm) {
  @apply text-gray-300 !important;
}

/* Estilos personalizados para inputs y selects */
select.appearance-none {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
}

/* Transiciones */
.transition-all {
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 200ms;
}

/* Estilos para los toast */
.toast-notification {
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Focus para accesibilidad */
:focus-visible {
  @apply outline-none ring-2 ring-blue-500;
}
</style>
---
import LayoutCommon from "../app/LayoutCommon.astro";
import LayoutProtected from "../app/LayoutProtected.astro";

interface Consulta {
  _id: string;
  fecha: string;
  pacienteId: {
    id: string;
    nombre: string;
  };
  medicoId: {
    _id: string;
    nombre: string;
    especialidad?: string;
  };
  motivo: string;
  tratamientos: string[];
  estado: "pendiente" | "completada" | "cancelada";
}
---

<LayoutProtected>
  <LayoutCommon>
    <div
      class="min-h-screen bg-gradient-to-r from-slate-50 to-slate-100 p-4 dark:from-slate-900 dark:to-slate-800 dark:text-slate-100 sm:p-6 lg:p-8"
    >
      <div class="mx-auto max-w-7xl animate-fadeIn">
        <!-- Header con acciones -->
        <div class="mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
          <div class="flex items-center gap-2">
            <button
              id="volverBtn"
              class="group flex items-center text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 transform group-hover:-translate-x-1 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
              </svg>
              Volver al inicio
            </button>
            <h1 class="text-2xl sm:text-3xl font-bold text-gray-800 dark:text-white flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-600 dark:text-blue-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              Citas Odontológicas
            </h1>
          </div>
          
          <button
            id="nuevaConsultaBtn"
            class="group inline-flex items-center justify-center rounded-lg bg-blue-600 px-4 py-2.5 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 transition-all duration-200 transform hover:scale-105"
          >
            <svg
              class="mr-2 h-4 w-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 4v16m8-8H4"></path>
            </svg>
            Nueva Cita
          </button>
        </div>

        <!-- Panel principal -->
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-xl overflow-hidden border border-gray-100 dark:border-gray-700">
          <!-- Filtros y Búsqueda -->
          <div class="px-6 py-5 border-b border-gray-200 dark:border-gray-700">
            <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div class="flex-grow max-w-lg">
                <label for="searchInput" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Buscar</label>
                <div class="relative">
                  <input
                    type="text"
                    id="searchInput"
                    placeholder="Buscar por nombre de paciente o médico..."
                    class="block w-full rounded-lg border border-gray-300 bg-white pl-10 pr-4 py-2.5 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 transition-colors"
                  />
                  <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                  </div>
                </div>
              </div>
              
              <div class="flex items-end space-x-4">
                <div class="w-40">
                  <label for="estadoFilter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Estado</label>
                  <div class="relative">
                    <select
                      id="estadoFilter"
                      class="appearance-none block w-full rounded-lg border border-gray-300 bg-white px-4 py-2.5 pr-8 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white transition-colors"
                    >
                      <option value="">Todos</option>
                      <option value="pendiente">Pendiente</option>
                      <option value="en_proceso">En Proceso</option>
                      <option value="completada">Completada</option>
                      <option value="cancelada">Cancelada</option>
                    </select>
                    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500 dark:text-gray-400">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                      </svg>
                    </div>
                  </div>
                </div>
                
                <button 
                  id="toggleViewBtn" 
                  class="inline-flex items-center rounded-lg border border-gray-300 bg-white px-3 py-2.5 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600 transition-colors"
                  title="Cambiar vista"
                >
                  <svg id="tableIcon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18M3 18h18M3 6h18" />
                  </svg>
                  <svg id="cardIcon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                  </svg>
                </button>
              </div>
            </div>
          </div>

          <!-- Estado de carga -->
          <div id="loadingState" class="py-16 flex justify-center items-center">
            <div class="flex flex-col items-center">
              <div class="relative w-16 h-16">
                <div class="absolute top-0 left-0 w-full h-full rounded-full border-4 border-gray-200 dark:border-gray-700"></div>
                <div class="absolute top-0 left-0 w-full h-full rounded-full border-4 border-blue-500 dark:border-blue-400 border-t-transparent animate-spin"></div>
              </div>
              <p class="mt-4 text-sm text-gray-500 dark:text-gray-400">Cargando citas...</p>
            </div>
          </div>

          <!-- Estado vacío -->
          <div id="emptyState" class="hidden py-16 flex flex-col items-center justify-center">
            <div class="rounded-full bg-blue-50 dark:bg-blue-900/30 p-4 mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-blue-500 dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
            </div>
            <h3 class="text-xl font-medium text-gray-900 dark:text-white mb-2">No hay citas disponibles</h3>
            <p class="text-gray-500 dark:text-gray-400 mb-6 text-center max-w-md">No se encontraron citas con los filtros actuales. Crea una nueva cita o ajusta tus filtros de búsqueda.</p>
            <button
              id="emptyStateBtn"
              class="inline-flex items-center justify-center rounded-lg bg-blue-600 px-4 py-2.5 text-sm font-medium text-white hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 transition-colors"
            >
              <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
              </svg>
              Nueva Cita
            </button>
          </div>

          <!-- Estado de error -->
          <div id="errorState" class="hidden py-16 flex flex-col items-center justify-center">
            <div class="rounded-full bg-red-50 dark:bg-red-900/30 p-4 mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-red-500 dark:text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h3 class="text-xl font-medium text-gray-900 dark:text-white mb-2">Error al cargar las citas</h3>
            <p id="errorMessage" class="text-gray-500 dark:text-gray-400 mb-6 text-center max-w-md">Ocurrió un error inesperado. Por favor intenta nuevamente más tarde.</p>
            <button
              id="retryBtn"
              class="inline-flex items-center justify-center rounded-lg bg-blue-600 px-4 py-2.5 text-sm font-medium text-white hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Reintentar
            </button>
          </div>

          <!-- Tabla de Consultas - Vista Desktop -->
          <div id="tableView" class="hidden overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead class="bg-gray-50 dark:bg-gray-700 sticky top-0 z-10">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">
                    <div class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      Fecha
                    </div>
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">
                    <div class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      Hora
                    </div>
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">
                    <div class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                      Paciente
                    </div>
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">
                    <div class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 4v12l-4-2-4 2V4M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      Médico
                    </div>
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">
                    <div class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                      </svg>
                      Motivo
                    </div>
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">
                    <div class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      Estado
                    </div>
                  </th>
                  <th scope="col" class="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">
                    <div class="flex items-center justify-end">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                      Acciones
                    </div>
                  </th>
                </tr>
              </thead>
              <tbody
                id="consultasTableBodyDesktop"
                class="divide-y divide-gray-200 bg-white dark:divide-gray-700 dark:bg-gray-800"
              >
                <!-- Se llena dinámicamente -->
              </tbody>
            </table>
          </div>

          <!-- Vista de Tarjetas -->
          <div id="cardView" class="hidden p-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            <!-- Se llena dinámicamente -->
          </div>
        </div>
      </div>
    </div>

    <!-- Modal de Edición -->
    <div id="editModal" class="fixed inset-0 z-50 hidden items-center justify-center">
      <div class="absolute inset-0 bg-black/60 backdrop-blur-sm transition-opacity duration-300"></div>
      <div class="relative bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-0 w-full max-w-2xl mx-auto transform transition-all duration-300 scale-95 opacity-0 modal-content">
        <!-- Header del modal -->
        <div class="flex justify-between items-center bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 px-6 py-4 border-b border-gray-200 dark:border-gray-700 rounded-t-xl">
          <h3 class="text-xl font-semibold text-gray-900 dark:text-white flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2 text-blue-600 dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
            Editar Cita
          </h3>
          <button
            type="button"
            onclick="window.closeEditModal()"
            class="text-gray-400 hover:text-gray-500 dark:text-gray-300 dark:hover:text-gray-400 transition-colors bg-white/10 rounded-full p-2"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <form id="editForm" class="p-6">
          <input type="hidden" name="id" />

          <div class="space-y-5">
            <!-- Fecha y Hora -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div class="space-y-2">
                <label
                  for="diaConsulta"
                  class="block text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Fecha
                </label>
                <div class="relative">
                  <input
                    type="date"
                    name="diaConsulta"
                    required
                    class="block w-full rounded-lg border border-gray-300 bg-white px-4 py-2.5 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 transition-colors"
                  />
                </div>
              </div>
              <div class="space-y-2">
                <label
                  for="horaConsulta"
                  class="block text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  Hora
                </label>
                <div class="relative">
                  <input
                    type="time"
                    name="horaConsulta"
                    required
                    class="block w-full rounded-lg border border-gray-300 bg-white px-4 py-2.5 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 transition-colors"
                  />
                </div>
              </div>
            </div>

            <!-- Paciente y Médico -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div class="space-y-2">
                <label
                  for="nombrePaciente"
                  class="block text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  Paciente
                </label>
                <div class="relative">
                  <select
                    name="nombrePaciente"
                    required
                    class="appearance-none block w-full rounded-lg border border-gray-300 bg-white px-4 py-2.5 pr-8 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 transition-colors"
                  >
                    <option value="">Seleccione un paciente</option>
                  </select>
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500 dark:text-gray-400">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </div>
                </div>
              </div>
              <div class="space-y-2">
                <label
                  for="nombreMedico"
                  class="block text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 4v12l-4-2-4 2V4M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Médico
                </label>
                <div class="relative">
                  <select
                    name="nombreMedico"
                    required
                    class="appearance-none block w-full rounded-lg border border-gray-300 bg-white px-4 py-2.5 pr-8 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 transition-colors"
                  >
                    <option value="">Seleccione un médico</option>
                  </select>
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500 dark:text-gray-400">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </div>
                </div>
              </div>
            </div>

            <!-- Motivo -->
            <div class="space-y-2">
              <label
                for="problema"
                class="block text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                </svg>
                Motivo
              </label>
              <input
                type="text"
                name="problema"
                required
                placeholder="Describa el motivo de la consulta"
                class="block w-full rounded-lg border border-gray-300 bg-white px-4 py-2.5 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 transition-colors"
              />
            </div>

            <!-- Tratamientos -->
            <div class="space-y-2">
              <label
                class="block text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
                </svg>
                Tratamientos
              </label>
              <div id="tratamientosEditContainer" class="space-y-3 rounded-lg border border-gray-200 dark:border-gray-700 p-4 bg-gray-50 dark:bg-gray-800/50">
                <div class="flex items-center gap-3">
                  <div class="relative flex-grow">
                    <select
                      name="tratamientos[]"
                      required
                      class="appearance-none block w-full rounded-lg border border-gray-300 bg-white px-4 py-2.5 pr-8 text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:placeholder-gray-400 transition-colors"
                    >
                      <option value="">Seleccione un tratamiento</option>
                    </select>
                    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500 dark:text-gray-400">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                      </svg>
                    </div>
                  </div>
                  <button
                    type="button"
                    id="addTratamientoEditBtn"
                    class="inline-flex items-center justify-center rounded-lg bg-blue-600 px-3 py-2.5 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 transition-all duration-200"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    <span class="sr-only">Añadir tratamiento</span>
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Botones de acción -->
          <div class="mt-8 flex justify-end items-center gap-3">
            <button
              type="button"
              onclick="window.closeEditModal()"
              class="inline-flex items-center rounded-lg border border-gray-300 bg-white px-4 py-2.5 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 -ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
              Cancelar
            </button>
            <button
              type="submit"
              class="inline-flex items-center rounded-lg bg-blue-600 px-4 py-2.5 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-blue-600 dark:hover:bg-blue-700 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 -ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
              Guardar Cambios
              <span id="editLoadingIndicator" class="hidden ml-2">
                <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Modal de Confirmación de Eliminación -->
    <div id="deleteConfirmModal" class="fixed inset-0 z-50 hidden items-center justify-center">
      <div class="absolute inset-0 bg-black/60 backdrop-blur-sm transition-opacity duration-300"></div>
      <div class="relative bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-6 w-full max-w-md mx-auto transform transition-all duration-300 scale-95 opacity-0 modal-content">
        <div class="text-center">
          <div class="flex justify-center mb-4">
            <div class="rounded-full bg-red-50 dark:bg-red-900/30 p-3">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-red-500 dark:text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            </div>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">¿Está seguro?</h3>
          <p class="text-sm text-gray-500 dark:text-gray-400 mb-6">
            ¿Desea eliminar esta cita? Esta acción no se puede deshacer.
          </p>
          <div class="flex justify-center space-x-3">
            <button
              id="cancelDeleteBtn"
              type="button"
              class="inline-flex items-center rounded-lg border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600 transition-colors"
            >
              Cancelar
            </button>
            <button
              id="confirmDeleteBtn"
              type="button"
              class="inline-flex items-center rounded-lg bg-red-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 dark:bg-red-600 dark:hover:bg-red-700 transition-colors"
            >
              Eliminar
              <span id="deleteLoadingIndicator" class="hidden ml-2">
                <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Notificaciones Toast -->
    <div id="toastContainer" class="fixed bottom-4 right-4 z-50"></div>
  </LayoutCommon>
</LayoutProtected>

<script>
const BASE_URL = "";

// Elementos del DOM
const elements = {
  // Contenedores principales
  tableView: document.getElementById('tableView'),
  cardView: document.getElementById('cardView'),
  loadingState: document.getElementById('loadingState'),
  emptyState: document.getElementById('emptyState'),
  errorState: document.getElementById('errorState'),
  
  // Elementos del cuerpo de la tabla
  consultasTableBodyDesktop: document.getElementById('consultasTableBodyDesktop'),
  
  // Elementos de filtro
  searchInput: document.getElementById('searchInput'),
  estadoFilter: document.getElementById('estadoFilter'),
  
  // Elementos de navegación
  toggleViewBtn: document.getElementById('toggleViewBtn'),
  tableIcon: document.getElementById('tableIcon'),
  cardIcon: document.getElementById('cardIcon'),
  
  // Botones
  nuevaConsultaBtn: document.getElementById('nuevaConsultaBtn'),
  volverBtn: document.getElementById('volverBtn'),
  emptyStateBtn: document.getElementById('emptyStateBtn'),
  retryBtn: document.getElementById('retryBtn'),
  
  // Elementos de modal
  editModal: document.getElementById('editModal'),
  editForm: document.getElementById('editForm'),
  editLoadingIndicator: document.getElementById('editLoadingIndicator'),
  
  // Elementos de confirmación de eliminación
  deleteConfirmModal: document.getElementById('deleteConfirmModal'),
  confirmDeleteBtn: document.getElementById('confirmDeleteBtn'),
  cancelDeleteBtn: document.getElementById('cancelDeleteBtn'),
  deleteLoadingIndicator: document.getElementById('deleteLoadingIndicator'),
  
  // Contenedor de notificaciones
  toastContainer: document.getElementById('toastContainer'),
  
  // Error message
  errorMessage: document.getElementById('errorMessage')
};

// Estado de la aplicación
const state = {
  consultas: [],
  consultasFiltradas: [],
  currentCitaToDelete: null,
  currentView: localStorage.getItem('preferredView') || 'table',
  loading: true,
  error: null
};

// Funciones de utilidad
function showToast(message, type = 'success') {
  const existingToast = document.querySelector('.toast-notification');
  if (existingToast) {
    existingToast.remove();
  }
  
  const toast = document.createElement('div');
  
  // Configurar colores y iconos según el tipo de notificación
  let bgColor, textColor, icon;
  switch (type) {
    case 'success':
      bgColor = 'bg-green-500';
      textColor = 'text-white';
      icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
      break;
    case 'error':
      bgColor = 'bg-red-500';
      textColor = 'text-white';
      icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
      break;
    case 'warning':
      bgColor = 'bg-yellow-500';
      textColor = 'text-white';
      icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path></svg>';
      break;
    default:
      bgColor = 'bg-blue-500';
      textColor = 'text-white';
      icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
  }
  
  toast.className = `toast-notification flex items-center px-4 py-3 rounded-lg shadow-lg ${bgColor} ${textColor} max-w-md transform translate-y-8 opacity-0 transition-all duration-300`;
  
  toast.innerHTML = `
    <div class="flex items-center">
      ${icon}
      <span>${message}</span>
    </div>
    <button class="ml-auto text-white hover:text-gray-200 focus:outline-none">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  `;
  
  elements.toastContainer.appendChild(toast);
  
  // Animar entrada
  setTimeout(() => {
    toast.classList.replace('translate-y-8', 'translate-y-0');
    toast.classList.replace('opacity-0', 'opacity-100');
  }, 50);
  
  // Agregar evento para cerrar el toast
  toast.querySelector('button').addEventListener('click', () => {
    closeToast(toast);
  });
  
  // Auto cerrar después de 5 segundos
  setTimeout(() => {
    closeToast(toast);
  }, 5000);
}

function closeToast(toast) {
  toast.classList.replace('translate-y-0', 'translate-y-8');
  toast.classList.replace('opacity-100', 'opacity-0');
  
  setTimeout(() => {
    toast.remove();
  }, 300);
}

function getEstadoInfo(estado) {
  const estados = {
    'pendiente': {
      class: 'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200',
      text: 'Pendiente',
      icon: '<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>'
    },
    'en_proceso': {
      class: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-200',
      text: 'En proceso',
      icon: '<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>'
    },
    'completada': {
      class: 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200',
      text: 'Completada',
      icon: '<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>'
    },
    'cancelada': {
      class: 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200',
      text: 'Cancelada',
      icon: '<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>'
    }
  };
  
  return estados[estado] || {
    class: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200',
    text: estado || 'Desconocido',
    icon: '<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>'
  };
}

function formatDate(dateString) {
  const date = new Date(dateString);
  const options = { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  };
  return date.toLocaleDateString('es-ES', options);
}

function formatTime(dateString) {
  const date = new Date(dateString);
  return date.toLocaleTimeString('es-ES', { 
    hour: '2-digit', 
    minute: '2-digit' 
  });
}

// Funciones de UI
function showLoadingState() {
  elements.loadingState.classList.remove('hidden');
  elements.tableView.classList.add('hidden');
  elements.cardView.classList.add('hidden');
  elements.emptyState.classList.add('hidden');
  elements.errorState.classList.add('hidden');
}

function showEmptyState() {
  elements.loadingState.classList.add('hidden');
  elements.tableView.classList.add('hidden');
  elements.cardView.classList.add('hidden');
  elements.emptyState.classList.remove('hidden');
  elements.errorState.classList.add('hidden');
}

function showErrorState(message) {
  elements.loadingState.classList.add('hidden');
  elements.tableView.classList.add('hidden');
  elements.cardView.classList.add('hidden');
  elements.emptyState.classList.add('hidden');
  elements.errorState.classList.remove('hidden');
  
  if (elements.errorMessage) {
    elements.errorMessage.textContent = message || 'Ocurrió un error inesperado.';
  }
}

function showDataState() {
  elements.loadingState.classList.add('hidden');
  elements.emptyState.classList.add('hidden');
  elements.errorState.classList.add('hidden');
  
  if (state.currentView === 'table') {
    elements.tableView.classList.remove('hidden');
    elements.cardView.classList.add('hidden');
    elements.tableIcon.classList.add('hidden');
    elements.cardIcon.classList.remove('hidden');
  } else {
    elements.tableView.classList.add('hidden');
    elements.cardView.classList.remove('hidden');
    elements.tableIcon.classList.remove('hidden');
    elements.cardIcon.classList.add('hidden');
  }
}

function toggleView() {
  state.currentView = state.currentView === 'table' ? 'card' : 'table';
  localStorage.setItem('preferredView', state.currentView);
  showDataState();
}

// Animación del modal
function showModal(modal) {
  if (!modal) return;
  
  modal.classList.remove('hidden');
  modal.classList.add('flex');
  
  setTimeout(() => {
    const content = modal.querySelector('.modal-content');
    if (content) {
      content.classList.remove('scale-95', 'opacity-0');
      content.classList.add('scale-100', 'opacity-100');
    }
  }, 10);
}

function hideModal(modal) {
  if (!modal) return;
  
  const content = modal.querySelector('.modal-content');
  if (content) {
    content.classList.remove('scale-100', 'opacity-100');
    content.classList.add('scale-95', 'opacity-0');
  }
  
  setTimeout(() => {
    modal.classList.remove('flex');
    modal.classList.add('hidden');
  }, 300);
}

// Funciones principales
async function cargarConsultas() {
  state.loading = true;
  showLoadingState();
  
  try {
    const response = await fetch(`${BASE_URL}/citas/todas`);
    if (!response.ok) throw new Error("Error al obtener citas");

    const data = await response.json();
    console.log("Citas cargadas:", data);

    state.consultas = data;
    state.consultasFiltradas = [...state.consultas];
    state.loading = false;
    
    if (state.consultasFiltradas.length === 0) {
      showEmptyState();
    } else {
      renderizarVistas();
      showDataState();
    }
  } catch (error) {
    console.error("Error:", error);
    state.loading = false;
    state.error = error.message;
    showErrorState(error.message);
    showToast("Error al cargar las consultas", "error");
  }
}

function filtrarConsultas() {
  const searchTerm = elements.searchInput?.value.toLowerCase();
  const estadoFilter = elements.estadoFilter?.value;

  state.consultasFiltradas = state.consultas.filter((consulta) => {
    const cumpleBusqueda =
      !searchTerm ||
      consulta.pacienteId?.nombre?.toLowerCase().includes(searchTerm) ||
      consulta.medicoId?.nombre?.toLowerCase().includes(searchTerm) ||
      consulta.motivo?.toLowerCase().includes(searchTerm);

    const cumpleEstado = !estadoFilter || consulta.estado === estadoFilter;

    return cumpleBusqueda && cumpleEstado;
  });

  if (state.consultasFiltradas.length === 0) {
    showEmptyState();
  } else {
    renderizarVistas();
    showDataState();
  }
}

function renderizarVistas() {
  renderizarTabla();
  renderizarTarjetas();
}

function renderizarTabla() {
  if (!elements.consultasTableBodyDesktop) return;
  
  elements.consultasTableBodyDesktop.innerHTML = "";
  
  state.consultasFiltradas.forEach((consulta, index) => {
    const estadoInfo = getEstadoInfo(consulta.estado);
    const row = document.createElement('tr');
    
    row.className = "hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-all duration-200 animate-fadeIn";
    row.style.animationDelay = `${index * 30}ms`;
    
    row.innerHTML = `
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900 dark:text-white font-medium">${formatDate(consulta.fecha)}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900 dark:text-white">${formatTime(consulta.fecha)}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="flex items-center">
          <div class="flex-shrink-0 h-8 w-8 bg-blue-100 dark:bg-blue-900/50 rounded-full flex items-center justify-center text-blue-800 dark:text-blue-200">
            ${consulta.pacienteId?.nombre?.charAt(0).toUpperCase() || '?'}
          </div>
          <div class="ml-3">
            <div class="text-sm font-medium text-gray-900 dark:text-white">${consulta.pacienteId?.nombre || "No disponible"}</div>
          </div>
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900 dark:text-white">${consulta.medicoId?.nombre || "No disponible"}</div>
        <div class="text-xs text-gray-500 dark:text-gray-400">${consulta.medicoId?.especialidad || ""}</div>
      </td>
      <td class="px-6 py-4 max-w-xs">
        <div class="text-sm text-gray-900 dark:text-white line-clamp-2">${consulta.motivo || ""}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${estadoInfo.class}">
          ${estadoInfo.icon}
          ${estadoInfo.text}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-right text-sm">
        <div class="flex items-center justify-end space-x-3">
          <button 
            onclick="window.openEditModal(${JSON.stringify(consulta).replace(/"/g, "&quot;")})"
            class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 transition-colors bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-900/30 p-1.5 rounded-lg"
            title="Editar cita"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
              <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
            </svg>
          </button>
          <button 
            onclick="window.confirmDelete('${consulta._id}')"
            class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 transition-colors bg-red-50 dark:bg-red-900/20 hover:bg-red-100 dark:hover:bg-red-900/30 p-1.5 rounded-lg"
            title="Eliminar cita"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M3 6h18"/>
              <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/>
              <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
            </svg>
          </button>
        </div>
      </td>
    `;
    
    elements.consultasTableBodyDesktop.appendChild(row);
  });
}

function renderizarTarjetas() {
  if (!elements.cardView) return;
  
  elements.cardView.innerHTML = "";
  
  state.consultasFiltradas.forEach((consulta, index) => {
    const estadoInfo = getEstadoInfo(consulta.estado);
    const card = document.createElement('div');
    
    card.className = "bg-white dark:bg-gray-800 rounded-xl shadow-md border border-gray-100 dark:border-gray-700 overflow-hidden transition-all duration-200 hover:shadow-lg hover:translate-y-[-2px] animate-fadeIn";
    card.style.animationDelay = `${index * 30}ms`;
    
    card.innerHTML = `
      <div class="border-b border-gray-100 dark:border-gray-700 px-4 py-3 flex justify-between items-center">
        <div class="flex items-center space-x-3">
          <div class="flex-shrink-0 h-10 w-10 bg-blue-100 dark:bg-blue-900/50 rounded-full flex items-center justify-center text-blue-800 dark:text-blue-200 text-lg font-medium">
            ${consulta.pacienteId?.nombre?.charAt(0).toUpperCase() || '?'}
          </div>
          <div>
            <div class="text-sm font-medium text-gray-900 dark:text-white">${consulta.pacienteId?.nombre || "No disponible"}</div>
            <div class="text-xs text-gray-500 dark:text-gray-400 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              ${formatDate(consulta.fecha)}
            </div>
          </div>
        </div>
        <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${estadoInfo.class}">
          ${estadoInfo.icon}
          ${estadoInfo.text}
        </span>
      </div>
      
      <div class="p-4">
        <div class="mb-4">
          <div class="grid grid-cols-2 gap-2 mb-2">
            <div>
              <div class="text-xs text-gray-500 dark:text-gray-400">Hora</div>
              <div class="text-sm text-gray-900 dark:text-white font-medium">${formatTime(consulta.fecha)}</div>
            </div>
            <div>
              <div class="text-xs text-gray-500 dark:text-gray-400">Médico</div>
              <div class="text-sm text-gray-900 dark:text-white font-medium">${consulta.medicoId?.nombre || "No disponible"}</div>
            </div>
          </div>
          
          <div>
            <div class="text-xs text-gray-500 dark:text-gray-400">Motivo</div>
            <div class="text-sm text-gray-900 dark:text-white line-clamp-2">${consulta.motivo || ""}</div>
          </div>
        </div>
        
        <div class="flex justify-end space-x-2">
          <button 
            onclick="window.openEditModal(${JSON.stringify(consulta).replace(/"/g, "&quot;")})"
            class="inline-flex items-center px-3 py-1.5 text-xs font-medium text-blue-700 bg-blue-50 dark:text-blue-300 dark:bg-blue-900/30 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/50 transition-colors"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
              <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
            </svg>
            Editar
          </button>
          <button 
            onclick="window.confirmDelete('${consulta._id}')"
            class="inline-flex items-center px-3 py-1.5 text-xs font-medium text-red-700 bg-red-50 dark:text-red-300 dark:bg-red-900/30 rounded-lg hover:bg-red-100 dark:hover:bg-red-900/50 transition-colors"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M3 6h18"/>
              <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/>
              <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
            </svg>
            Eliminar
          </button>
        </div>
      </div>
    `;
    
    elements.cardView.appendChild(card);
  });
}

// Funciones para tratamientos
async function cargarTratamientoEdit(selectElement) {
  try {
    const response = await fetch(`${BASE_URL}/tratamientos`);
    if (!response.ok) throw new Error("Error al cargar tratamientos");

    const data = await response.json();
    
    selectElement.innerHTML = '<option value="">Seleccione un tratamiento</option>';
    data.forEach((tratamiento) => {
      const option = document.createElement("option");
      option.value = tratamiento._id;
      option.textContent = tratamiento.nombre || tratamiento.nombreTratamiento;
      option.className = "text-gray-900 dark:text-gray-100";
      selectElement.appendChild(option);
    });
  } catch (error) {
    console.error("Error al cargar tratamientos:", error);
    showToast("Error al cargar tratamientos", "error");
  }
}

function setupTratamientosEdit() {
  document
    .getElementById("addTratamientoEditBtn")
    ?.addEventListener("click", () => {
      const tratamientosContainer = document.getElementById("tratamientosEditContainer");

      const tratamientoGroup = document.createElement("div");
      tratamientoGroup.classList.add("flex", "items-center", "gap-3", "mt-3", "animate-fadeIn");

      const selectContainer = document.createElement("div");
      selectContainer.classList.add("relative", "flex-grow");

      const select = document.createElement("select");
      select.name = "tratamientos[]";
      select.required = true;
      select.classList.add(
        "appearance-none",
        "block",
        "w-full",
        "rounded-lg",
        "border",
        "border-gray-300",
        "bg-white",
        "px-4",
        "py-2.5",
        "pr-8",
        "text-gray-900",
        "shadow-sm",
        "focus:border-blue-500",
        "focus:ring-blue-500",
        "dark:border-gray-600",
        "dark:bg-gray-700",
        "dark:text-gray-100",
        "transition-colors"
      );

      const iconContainer = document.createElement('div');
      iconContainer.classList.add('pointer-events-none', 'absolute', 'inset-y-0', 'right-0', 'flex', 'items-center', 'px-2', 'text-gray-500', 'dark:text-gray-400');
      iconContainer.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>';

      selectContainer.appendChild(select);
      selectContainer.appendChild(iconContainer);

      const removeButton = document.createElement("button");
      removeButton.type = "button";
      removeButton.classList.add(
        "inline-flex",
        "items-center",
        "justify-center",
        "rounded-lg",
        "bg-red-600",
        "px-3",
        "py-2.5",
        "text-white",
        "hover:bg-red-700",
        "focus:outline-none",
        "focus:ring-4",
        "focus:ring-red-300",
        "dark:bg-red-600",
        "dark:hover:bg-red-700",
        "transition-all",
        "duration-200"
      );
      removeButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" /></svg><span class="sr-only">Eliminar tratamiento</span>';
      removeButton.addEventListener("click", () => {
        tratamientoGroup.classList.add('animate-fadeOut');
        setTimeout(() => {
          tratamientoGroup.remove();
        }, 300);
      });

      tratamientoGroup.appendChild(selectContainer);
      tratamientoGroup.appendChild(removeButton);
      tratamientosContainer?.appendChild(tratamientoGroup);

      cargarTratamientoEdit(select);
    });
}

// Cargar datos para el formulario de edición
async function cargarMedicos() {
  try {
    const response = await fetch(`${BASE_URL}/medico`);
    if (!response.ok) throw new Error("Error al cargar médicos");

    const data = await response.json();
    const medicos = data.medicos;
    const selectMedico = document.querySelector('select[name="nombreMedico"]');

    if (selectMedico) {
      selectMedico.innerHTML = '<option value="">Seleccione un médico</option>';
      medicos.forEach((medico) => {
        const option = document.createElement("option");
        option.value = medico._id;
        option.textContent = `${medico.nombre} - ${medico.especialidad || "Sin especialidad"}`;
        selectMedico.appendChild(option);
      });
    }
  } catch (error) {
    console.error("Error:", error);
    showToast("Error al cargar médicos", "error");
  }
}

async function cargarPacientes() {
  try {
    const response = await fetch(`${BASE_URL}/paciente`);
    if (!response.ok) throw new Error("Error al cargar pacientes");

    const data = await response.json();
    const selectPaciente = document.querySelector('select[name="nombrePaciente"]');

    if (selectPaciente) {
      selectPaciente.innerHTML = '<option value="">Seleccione un paciente</option>';
      data.pacientes.forEach((paciente) => {
        const option = document.createElement("option");
        option.value = paciente.id;
        option.textContent = `${paciente.nombre} - DNI: ${paciente.dni || "No disponible"}`;
        selectPaciente.appendChild(option);
      });
    }
  } catch (error) {
    console.error("Error:", error);
    showToast("Error al cargar pacientes", "error");
  }
}

// Funciones de CRUD
async function openEditModal(cita) {
  console.log("Cita a editar:", cita);

  // Mostrar modal con animación
  showModal(elements.editModal);
  
  // Preparar formulario
  if (elements.editForm) {
    try {
      await Promise.all([cargarMedicos(), cargarPacientes()]);

      const fecha = new Date(cita.fecha);
      const dia = fecha.toISOString().split("T")[0];
      const hora = fecha.toTimeString().slice(0, 5);

      elements.editForm.elements.namedItem("id").value = cita._id;
      elements.editForm.elements.namedItem("diaConsulta").value = dia;
      elements.editForm.elements.namedItem("horaConsulta").value = hora;
      elements.editForm.elements.namedItem("nombrePaciente").value = cita.pacienteId.id;
      elements.editForm.elements.namedItem("nombreMedico").value = cita.medicoId._id;
      elements.editForm.elements.namedItem("problema").value = cita.motivo;

      // Limpiar tratamientos anteriores
      const tratamientosContainer = document.getElementById("tratamientosEditContainer");
      if (tratamientosContainer) {
        tratamientosContainer.innerHTML = "";
      }

      // Crear primer grupo de tratamiento
      const primerGrupo = document.createElement("div");
      primerGrupo.classList.add("flex", "items-center", "gap-3");
      
      const selectContainer = document.createElement("div");
      selectContainer.classList.add("relative", "flex-grow");
      
      const select = document.createElement("select");
      select.name = "tratamientos[]";
      select.required = true;
      select.classList.add(
        "appearance-none",
        "block",
        "w-full",
        "rounded-lg",
        "border",
        "border-gray-300",
        "bg-white",
        "px-4",
        "py-2.5",
        "pr-8",
        "text-gray-900",
        "shadow-sm",
        "focus:border-blue-500",
        "focus:ring-blue-500",
        "dark:border-gray-600",
        "dark:bg-gray-700",
        "dark:text-gray-100",
        "transition-colors"
      );
      
      const iconContainer = document.createElement('div');
      iconContainer.classList.add('pointer-events-none', 'absolute', 'inset-y-0', 'right-0', 'flex', 'items-center', 'px-2', 'text-gray-500', 'dark:text-gray-400');
      iconContainer.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>';
      
      selectContainer.appendChild(select);
      selectContainer.appendChild(iconContainer);
      
      const addButton = document.createElement("button");
      addButton.type = "button";
      addButton.id = "addTratamientoEditBtn";
      addButton.classList.add(
        "inline-flex",
        "items-center",
        "justify-center",
        "rounded-lg",
        "bg-blue-600",
        "px-3",
        "py-2.5",
        "text-sm",
        "font-medium",
        "text-white",
        "hover:bg-blue-700",
        "focus:outline-none",
        "focus:ring-4",
        "focus:ring-blue-300",
        "dark:bg-blue-600",
        "dark:hover:bg-blue-700",
        "transition-all",
        "duration-200"
      );
      addButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
        </svg>
        <span class="sr-only">Añadir tratamiento</span>
      `;
      
      primerGrupo.appendChild(selectContainer);
      primerGrupo.appendChild(addButton);
      tratamientosContainer?.appendChild(primerGrupo);
      
      await cargarTratamientoEdit(select);

      // Cargar los tratamientos existentes
      if (Array.isArray(cita.tratamientos) && cita.tratamientos.length > 0) {
        // Si hay tratamientos, establecer el primero en el select que ya existe
        const primerSelect = select;
        let isFirst = true;
        
        for (const tratamiento of cita.tratamientos) {
          const tratamientoId = typeof tratamiento === "string" ? tratamiento : tratamiento._id;
          
          if (tratamientoId) {
            if (isFirst) {
              // Usar el primer select que ya creamos
              primerSelect.value = tratamientoId;
              isFirst = false;
            } else {
              // Crear grupos adicionales para los demás tratamientos
              const grupoAdicional = document.createElement("div");
              grupoAdicional.classList.add("flex", "items-center", "gap-3", "mt-3", "animate-fadeIn");
              
              const selectContainerAdicional = document.createElement("div");
              selectContainerAdicional.classList.add("relative", "flex-grow");
              
              const selectAdicional = document.createElement("select");
              selectAdicional.name = "tratamientos[]";
              selectAdicional.required = true;
              selectAdicional.classList.add(
                "appearance-none",
                "block",
                "w-full",
                "rounded-lg",
                "border",
                "border-gray-300",
                "bg-white",
                "px-4",
                "py-2.5",
                "pr-8",
                "text-gray-900",
                "shadow-sm",
                "focus:border-blue-500",
                "focus:ring-blue-500",
                "dark:border-gray-600",
                "dark:bg-gray-700",
                "dark:text-gray-100",
                "transition-colors"
              );
              
              const iconContainerAdicional = document.createElement('div');
              iconContainerAdicional.classList.add('pointer-events-none', 'absolute', 'inset-y-0', 'right-0', 'flex', 'items-center', 'px-2', 'text-gray-500', 'dark:text-gray-400');
              iconContainerAdicional.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>';
              
              selectContainerAdicional.appendChild(selectAdicional);
              selectContainerAdicional.appendChild(iconContainerAdicional);
              
              const removeButton = document.createElement("button");
              removeButton.type = "button";
              removeButton.classList.add(
                "inline-flex",
                "items-center",
                "justify-center",
                "rounded-lg",
                "bg-red-600",
                "px-3",
                "py-2.5",
                "text-white",
                "hover:bg-red-700",
                "focus:outline-none",
                "focus:ring-4",
                "focus:ring-red-300",
                "dark:bg-red-600",
                "dark:hover:bg-red-700",
                "transition-all",
                "duration-200"
              );
              removeButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" /></svg><span class="sr-only">Eliminar tratamiento</span>';
              removeButton.addEventListener("click", () => {
                grupoAdicional.classList.add('animate-fadeOut');
                setTimeout(() => {
                  grupoAdicional.remove();
                }, 300);
              });
              
              grupoAdicional.appendChild(selectContainerAdicional);
              grupoAdicional.appendChild(removeButton);
              tratamientosContainer?.appendChild(grupoAdicional);
              
              await cargarTratamientoEdit(selectAdicional);
              selectAdicional.value = tratamientoId;
            }
          }
        }
      }

      // Configurar eventos de botones
      setupTratamientosEdit();
    } catch (error) {
      console.error("Error al cargar el formulario:", error);
      showToast("Error al cargar los datos de la cita", "error");
      hideModal(elements.editModal);
    }
  }
}

function closeEditModal() {
  hideModal(elements.editModal);
}

function confirmDelete(citaId) {
  state.currentCitaToDelete = citaId;
  showModal(elements.deleteConfirmModal);
}

function cancelDelete() {
  state.currentCitaToDelete = null;
  hideModal(elements.deleteConfirmModal);
}

async function eliminarCita() {
  if (!state.currentCitaToDelete) return;
  
  // Mostrar indicador de carga
  elements.deleteLoadingIndicator.classList.remove('hidden');
  elements.confirmDeleteBtn.disabled = true;
  
  try {
    const response = await fetch(`${BASE_URL}/citas/${state.currentCitaToDelete}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Origin: "http://localhost:4321",
      },
    });

    if (!response.ok) throw new Error("Error al eliminar la cita");

    // Actualizar estado local
    state.consultas = state.consultas.filter((consulta) => consulta._id !== state.currentCitaToDelete);
    state.consultasFiltradas = state.consultasFiltradas.filter((consulta) => consulta._id !== state.currentCitaToDelete);
    
    // Ocultar modal y mostrar notificación
    hideModal(elements.deleteConfirmModal);
    showToast("Cita eliminada exitosamente", "success");
    
    // Actualizar vistas
    if (state.consultasFiltradas.length === 0) {
      showEmptyState();
    } else {
      renderizarVistas();
      showDataState();
    }
  } catch (error) {
    console.error("Error:", error);
    showToast("Error al eliminar la cita", "error");
  } finally {
    // Ocultar indicador de carga
    elements.deleteLoadingIndicator.classList.add('hidden');
    elements.confirmDeleteBtn.disabled = false;
    state.currentCitaToDelete = null;
  }
}

async function handleEditFormSubmit(e) {
  e.preventDefault();
  
  // Mostrar indicador de carga
  elements.editLoadingIndicator.classList.remove('hidden');
  e.submitter.disabled = true;

  try {
    const form = e.target;
    const formData = new FormData(form);

    // Obtener la cita actual para mantener su estado
    const citaId = formData.get("id");
    const citaActual = state.consultas.find((c) => c._id === citaId);

    // Obtener fecha y hora
    const fecha = formData.get("diaConsulta");
    const hora = formData.get("horaConsulta");
    
    if (!fecha || !hora) {
      throw new Error('La fecha y hora son requeridas');
    }

    // Recopilar tratamientos
    const tratamientosSelects = form.querySelectorAll('select[name="tratamientos[]"]');
    const tratamientos = Array.from(tratamientosSelects)
      .map((select) => {
        if (select.value) {
          return { _id: select.value };
        }
        return null;
      })
      .filter((id) => id !== null);

    const citaData = {
      _id: citaId,
      fecha: new Date(`${fecha}T${hora}`).toISOString(),
      pacienteId: formData.get("nombrePaciente"),
      medicoId: formData.get("nombreMedico"),
      motivo: formData.get("problema"),
      tratamientos: tratamientos,
      estado: citaActual?.estado || "pendiente", // Mantener el estado actual
    };

    if (
      !citaData.pacienteId ||
      !citaData.medicoId ||
      !citaData.motivo ||
      !citaData.fecha
    ) {
      throw new Error("Todos los campos son requeridos");
    }

    const response = await fetch(`${BASE_URL}/citas/${citaData._id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Origin: "http://localhost:4321",
      },
      body: JSON.stringify(citaData),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || "Error al actualizar la cita");
    }

    // Actualizar estado y mostrar notificación
    hideModal(elements.editModal);
    showToast("Cita actualizada exitosamente", "success");
    
    // Recargar datos
    await cargarConsultas();
  } catch (error) {
    console.error("Error completo:", error);
    showToast(error.message || "Error al actualizar la cita", "error");
    
    // Ocultar indicador de carga
    elements.editLoadingIndicator.classList.add('hidden');
    e.submitter.disabled = false;
  }
}

// Configuración de eventos
function setupEventListeners() {
  // Filtros
  elements.searchInput?.addEventListener("input", filtrarConsultas);
  elements.estadoFilter?.addEventListener("change", filtrarConsultas);
  
  // Botones de navegación
  elements.nuevaConsultaBtn?.addEventListener("click", () => {
    window.location.href = "/nueva-cita";
  });
  
  elements.emptyStateBtn?.addEventListener("click", () => {
    window.location.href = "/nueva-cita";
  });
  
  elements.volverBtn?.addEventListener("click", () => {
    window.location.href = "/";
  });
  
  elements.retryBtn?.addEventListener("click", cargarConsultas);
  
  // Toggle de vista
  elements.toggleViewBtn?.addEventListener("click", toggleView);
  
  // Form submit
  elements.editForm?.addEventListener("submit", handleEditFormSubmit);
  
  // Manejo de modales
  elements.confirmDeleteBtn?.addEventListener("click", eliminarCita);
  elements.cancelDeleteBtn?.addEventListener("click", cancelDelete);
  
  // Keyboard events
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      closeEditModal();
      cancelDelete();
    }
  });
  
  // Click en el backdrop para cerrar modales
  elements.editModal?.addEventListener('click', (e) => {
    if (e.target === elements.editModal) {
      closeEditModal();
    }
  });
  
  elements.deleteConfirmModal?.addEventListener('click', (e) => {
    if (e.target === elements.deleteConfirmModal) {
      cancelDelete();
    }
  });
}

// Exponer funciones necesarias al objeto window
window.openEditModal = openEditModal;
window.closeEditModal = closeEditModal;
window.confirmDelete = confirmDelete;

// Inicialización
document.addEventListener("DOMContentLoaded", () => {
  // Cargar datos iniciales
  cargarConsultas();
  
  // Configurar event listeners
  setupEventListeners();
  
  // Configurar tratamientos en el modal de edición
  setupTratamientosEdit();
});
</script>

<style>
/* Animaciones */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes fadeOut {
  from { opacity: 1; transform: translateY(0); }
  to { opacity: 0; transform: translateY(10px); }
}

.animate-fadeIn {
  animation: fadeIn 0.3s ease-out forwards;
}

.animate-fadeOut {
  animation: fadeOut 0.3s ease-out forwards;
}

/* Estado activo para botones */
.view-btn.active {
  @apply bg-blue-600 text-white;
}

/* Estilos para scrollbar más elegante */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  @apply bg-gray-100 dark:bg-gray-800 rounded-lg;
}

::-webkit-scrollbar-thumb {
  @apply bg-gray-300 dark:bg-gray-600 rounded-lg;
}

::-webkit-scrollbar-thumb:hover {
  @apply bg-gray-400 dark:bg-gray-500;
}

/* Limitar altura de texto en celdas */
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;  
  overflow: hidden;
}

/* Transiciones */
.transition-all {
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

/* Estilos para select */
select.appearance-none {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
}

/* Focus para accesibilidad */
:focus-visible {
  @apply outline-none ring-2 ring-blue-500;
}

/* Modales */
.modal-content {
  transition-property: opacity, transform;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 300ms;
}

/* Mejoras en dark mode */
.dark .bg-blue-900\/20 {
  background-color: rgba(30, 58, 138, 0.2);
}

.dark .bg-blue-900\/30 {
  background-color: rgba(30, 58, 138, 0.3);
}

.dark .bg-red-900\/20 {
  background-color: rgba(127, 29, 29, 0.2);
}

.dark .bg-red-900\/30 {
  background-color: rgba(127, 29, 29, 0.3);
}

.dark .bg-green-900\/50 {
  background-color: rgba(6, 78, 59, 0.5);
}

.dark .bg-yellow-900\/50 {
  background-color: rgba(120, 53, 15, 0.5);
}

.dark .bg-blue-900\/50 {
  background-color: rgba(30, 58, 138, 0.5);
}

.dark .bg-red-900\/50 {
  background-color: rgba(127, 29, 29, 0.5);
}

.dark .bg-gray-700\/50 {
  background-color: rgba(55, 65, 81, 0.5);
}
</style>